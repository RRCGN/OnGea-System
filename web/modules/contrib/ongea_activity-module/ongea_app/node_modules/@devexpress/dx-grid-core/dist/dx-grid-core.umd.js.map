{"version":3,"file":"dx-grid-core.umd.js","sources":["../src/plugins/grid-core/computeds.js","../src/plugins/sorting-state/reducers.js","../src/plugins/sorting-state/helpers.js","../src/utils/merge-sort.js","../src/utils/hierarchical-data.js","../src/plugins/integrated-sorting/computeds.js","../src/plugins/filtering-state/reducers.js","../src/plugins/filtering-state/helpers.js","../src/plugins/filtering-state/computeds.js","../src/plugins/integrated-filtering/computeds.js","../src/plugins/grouping-state/constants.js","../src/plugins/grouping-state/reducers.js","../src/plugins/grouping-state/helpers.js","../src/plugins/integrated-grouping/constants.js","../src/plugins/integrated-grouping/computeds.js","../src/plugins/custom-grouping/computeds.js","../src/plugins/grouping-panel/helpers.js","../src/plugins/paging-state/reducers.js","../src/plugins/integrated-paging/helpers.js","../src/plugins/integrated-paging/computeds.js","../src/plugins/paging-panel/helpers.js","../src/utils/common-reducers.js","../src/plugins/selection-state/reducers.js","../src/plugins/integrated-selection/computeds.js","../src/plugins/editing-state/reducers.js","../src/plugins/editing-state/computeds.js","../src/plugins/editing-state/helpers.js","../src/plugins/table-column-reordering/constants.js","../src/plugins/table-column-reordering/reducers.js","../src/plugins/table/constants.js","../src/plugins/table-column-reordering/computeds.js","../src/plugins/table-column-resizing/computeds.js","../src/plugins/table-column-resizing/reducers.js","../src/plugins/table-edit-column/constants.js","../src/plugins/table-edit-row/constants.js","../src/plugins/table-header-row/constants.js","../src/plugins/table-edit-column/helpers.js","../src/plugins/table-edit-column/computeds.js","../src/plugins/table-edit-row/helpers.js","../src/plugins/table-edit-row/computeds.js","../src/plugins/table-filter-row/constants.js","../src/plugins/table-filter-row/helpers.js","../src/plugins/table-filter-row/computeds.js","../src/plugins/table-group-row/constants.js","../src/plugins/table-group-row/helpers.js","../src/plugins/table-group-row/computeds.js","../src/plugins/table-header-row/helpers.js","../src/plugins/table-header-row/computeds.js","../src/plugins/table-band-header/constants.js","../src/plugins/table-band-header/helpers.js","../src/plugins/table-band-header/computeds.js","../src/plugins/row-detail-state/reducers.js","../src/plugins/table-row-detail/constants.js","../src/plugins/table-row-detail/helpers.js","../src/plugins/table-row-detail/computeds.js","../src/plugins/table-selection/constants.js","../src/plugins/table-selection/helpers.js","../src/plugins/table-selection/computeds.js","../src/plugins/table/helpers.js","../src/utils/column-extension.js","../src/plugins/table/computeds.js","../src/plugins/table-column-visibility/computeds.js","../src/plugins/table-column-visibility/helpers.js","../src/plugins/column-chooser/computeds.js","../src/plugins/column-chooser/reducers.js","../src/plugins/tree-data-state/reducers.js","../src/plugins/custom-tree-data/constants.js","../src/plugins/custom-tree-data/computeds.js","../src/plugins/table-tree-column/helpers.js","../src/plugins/search-state/reducers.js","../src/plugins/search-state/computeds.js","../src/plugins/data-type-provider/computeds.js","../src/utils/column-geometries.js","../src/utils/table.js","../src/utils/group-panel.js","../src/utils/messages-formatter.js","../src/utils/virtual-table.js"],"sourcesContent":["export const rowIdGetter = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]));\n    return row => map.get(row);\n  }\n  return getRowId;\n};\n\nconst defaultGetCellValue = (row, columnName) => row[columnName];\nexport const cellValueGetter = (getCellValue = defaultGetCellValue, columns) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n","export const changeColumnSorting = (state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting = [];\n  if (keepOther === true) {\n    nextSorting = sorting.slice();\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = sorting.slice()\n      .filter(columnSorting => keepOther.indexOf(columnSorting.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting\n    .findIndex(columnSorting => columnSorting.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction ||\n      (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n","const unique = arr => [...new Set(arr)];\n\nexport const getColumnSortingDirection = (sorting, columnName) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nexport const getPersistentSortedColumns = (sorting, columnExtensions = []) =>\n  columnExtensions.reduce((acc, { columnName, sortingEnabled }) => {\n    if (sortingEnabled === false) {\n      if (sorting.findIndex(sortItem => sortItem.columnName === columnName) > -1) {\n        acc.push(columnName);\n      }\n    }\n    return acc;\n  }, []);\n\nexport const calculateKeepOther = (sorting, keepOther, persistentSortedColumns = []) => {\n  if (!persistentSortedColumns.length) return keepOther;\n  if (!keepOther) return persistentSortedColumns;\n\n  return Array.isArray(keepOther)\n    ? unique([...keepOther, ...persistentSortedColumns])\n    : unique([...sorting.map(item => item.columnName), ...persistentSortedColumns]);\n};\n","/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\nconst merge = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array,\n  compare = (a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = array.slice();\n  const auxiliary = array.slice();\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n","export const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows,\n  );\n};\n","import mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst defaultCompare = (a, b) => {\n  if (a < b) return -1;\n  if (a > b) return 1;\n  return 0;\n};\n\nconst createCompare = (sorting, getColumnCompare, getComparableValue) =>\n  sorting.slice()\n    .reverse()\n    .reduce(\n      (prevCompare, columnSorting) => {\n        const { columnName } = columnSorting;\n        const inverse = columnSorting.direction === 'desc';\n        const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n        return (aRow, bRow) => {\n          const a = getComparableValue(aRow, columnName);\n          const b = getComparableValue(bRow, columnName);\n          const result = columnCompare(a, b);\n\n          if (result !== 0) {\n            return inverse ? -result : result;\n          }\n          return prevCompare(aRow, bRow);\n        };\n      },\n      () => 0,\n    );\n\nconst sortTree = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(sortedTree, (a, b) =>\n    compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b));\n};\n\nconst sortHierarchicalRows = (rows, compare, getRowLevelKey) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows = (\n  rows,\n  sorting,\n  getCellValue,\n  getColumnCompare,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  if (!getRowLevelKey) {\n    const compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  const compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n","export const changeColumnFilter = (filters, { columnName, config }) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = filters.slice();\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n","export const getColumnFilterConfig = (filters, columnName) => {\n  if (!filters.length) { return null; }\n\n  const filter = filters.filter(s => s.columnName === columnName)[0];\n  if (!filter) return null;\n\n  return filter;\n};\n","export const filterExpression = (filters, expression) => {\n  const selfFilterExpr = { operator: 'and', filters };\n  if (!expression) {\n    return selfFilterExpr;\n  }\n  return {\n    operator: 'and',\n    filters: [expression, selfFilterExpr],\n  };\n};\n","import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst AND = predicates => row =>\n  predicates.reduce((acc, predicate) => acc && predicate(row), true);\n\nconst OR = predicates => row =>\n  predicates.reduce((acc, predicate) => acc || predicate(row), false);\n\nconst operators = { or: OR, and: AND };\n\nconst toLowerCase = value => String(value).toLowerCase();\n\nconst operationPredicates = {\n  contains: (value, filter) => toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1,\n  notContains: (value, filter) => toLowerCase(value).indexOf(toLowerCase(filter.value)) === -1,\n  startsWith: (value, filter) => toLowerCase(value).startsWith(toLowerCase(filter.value)),\n  endsWith: (value, filter) => toLowerCase(value).endsWith(toLowerCase(filter.value)),\n  equal: (value, filter) => value === filter.value,\n  notEqual: (value, filter) => value !== filter.value,\n  greaterThan: (value, filter) => value > filter.value,\n  greaterThanOrEqual: (value, filter) => value >= filter.value,\n  lessThan: (value, filter) => value < filter.value,\n  lessThanOrEqual: (value, filter) => value <= filter.value,\n};\n\nexport const defaultFilterPredicate = (value, filter) => {\n  const operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nconst filterTree = (tree, predicate) =>\n  tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        const filteredChildren = filterTree(node.children, predicate);\n        if (filteredChildren.length > 0) {\n          acc.push({\n            ...node,\n            children: filteredChildren,\n          });\n          return acc;\n        }\n        if (predicate(node.root, true)) {\n          acc.push(node.root);\n          return acc;\n        }\n        return acc;\n      }\n\n      if (predicate(node)) {\n        acc.push(node);\n        return acc;\n      }\n\n      return acc;\n    },\n    [],\n  );\n\nconst filterHierarchicalRows = (rows, predicate, getRowLevelKey, getCollapsedRows) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n  const collapsedRowsMeta = [];\n\n  const filteredTree = filterTree(tree, (row, isNode) => {\n    if (isNode) {\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows && collapsedRows.length) {\n        const filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n      return false;\n    }\n    return predicate(row);\n  });\n\n  return { rows: treeToRows(filteredTree), collapsedRowsMeta: new Map(collapsedRowsMeta) };\n};\n\nconst buildPredicate = (\n  initialFilterExpression,\n  getCellValue,\n  getColumnPredicate,\n) => {\n  const getSimplePredicate = (filterExpression) => {\n    const { columnName } = filterExpression;\n    const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    const predicate = customPredicate || defaultFilterPredicate;\n    return row =>\n      predicate(getCellValue(row, columnName), filterExpression, row);\n  };\n\n  const getOperatorPredicate = (filterExpression) => {\n    const build = operators[toLowerCase(filterExpression.operator)];\n    // eslint-disable-next-line no-use-before-define\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  const getPredicate = filterExpression =>\n    getOperatorPredicate(filterExpression) ||\n    getSimplePredicate(filterExpression);\n\n  return getPredicate(initialFilterExpression);\n};\n\nexport const filteredRows = (\n  rows,\n  filterExpression,\n  getCellValue,\n  getColumnPredicate,\n  getRowLevelKey,\n  getCollapsedRows,\n) => {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    return { rows };\n  }\n\n  const predicate = buildPredicate(\n    filterExpression,\n    getCellValue,\n    getColumnPredicate,\n  );\n\n  return getRowLevelKey\n    ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows)\n    : { rows: rows.filter(predicate) };\n};\n\nexport const filteredCollapsedRowsGetter = ({ collapsedRowsMeta }) =>\n  row => collapsedRowsMeta && collapsedRowsMeta.get(row);\n\nexport const unwrappedFilteredRows = ({ rows }) => rows;\n","export const GROUP_KEY_SEPARATOR = '|';\n","import { GROUP_KEY_SEPARATOR } from './constants';\n\nconst applyColumnGrouping = (grouping, { columnName, groupIndex }) => {\n  const nextGrouping = grouping.slice();\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping.splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping = ({ grouping, expandedGroups }, { columnName, groupIndex }) => {\n  const nextGrouping = applyColumnGrouping(grouping, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping.findIndex((group, index) =>\n    !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName);\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups.filter(group =>\n    group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex);\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups = (state, { groupKey }) => {\n  const expandedGroups = state.expandedGroups.slice();\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping = ({ grouping, draftGrouping }, { columnName, groupIndex }) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n","export const adjustSortIndex = (groupingIndex, grouping, sorting) =>\n  Math.max(\n    grouping.slice(0, groupingIndex).reduce(\n      (acc, columnGrouping) => {\n        const columnSortingIndex = sorting.findIndex(columnSorting =>\n          columnSorting.columnName === columnGrouping.columnName);\n        return (columnSortingIndex === -1 ? acc - 1 : acc);\n      },\n      groupingIndex,\n    ),\n    0,\n  );\n","export const GRID_GROUP_TYPE = 'group';\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE}_levelKey`);\nexport const GRID_GROUP_COLLAPSED_ROWS = Symbol(`${GRID_GROUP_TYPE}_collapsedRows`);\n\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n  GRID_GROUP_COLLAPSED_ROWS,\n} from './constants';\n\nexport const groupRowChecker = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = row => row[GRID_GROUP_LEVEL_KEY];\n\nconst defaultColumnCriteria = value => ({\n  key: String(value),\n  value,\n});\n\nexport const groupedRows = (\n  rows,\n  grouping,\n  getCellValue,\n  getColumnCriteria,\n  keyPrefix = '',\n) => {\n  if (!grouping.length) return rows;\n\n  const { columnName } = grouping[0];\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n    || defaultColumnCriteria;\n  const groups = rows\n    .reduce((acc, row) => {\n      const { key, value = key } = groupCriteria(getCellValue(row, columnName), row);\n      const sameKeyItems = acc.get(key);\n\n      if (!sameKeyItems) {\n        acc.set(key, [value, key, [row]]);\n      } else {\n        sameKeyItems[2].push(row);\n      }\n      return acc;\n    }, new Map());\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return [...groups.values()]\n    .reduce((acc, [value, key, items]) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...groupedRows(\n        items,\n        nestedGrouping,\n        getCellValue,\n        getColumnCriteria,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const expandedGroupRows = (rows, grouping, expandedGroups) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        [GRID_GROUP_COLLAPSED_ROWS]: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const groupCollapsedRowsGetter = getCollapsedRows =>\n  row => row[GRID_GROUP_COLLAPSED_ROWS] || (getCollapsedRows && getCollapsedRows(row));\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from '../integrated-grouping/constants';\n\nexport const customGroupedRows = (\n  currentRows,\n  grouping,\n  getChildGroups,\n  rootRows = currentRows,\n  keyPrefix = '',\n) => {\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows)\n    .reduce((acc, { key, value = key, childRows }) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...customGroupedRows(\n        childRows,\n        nestedGrouping,\n        getChildGroups,\n        rootRows,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const customGroupingRowIdGetter = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]));\n\n  return row => map.get(row);\n};\n","export const groupingPanelItems = (columns, grouping, draftGrouping) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName),\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName),\n      draft: true,\n    });\n  });\n\n  return items;\n};\n","export const setCurrentPage = (prevPage, page) => page;\nexport const setPageSize = (prevPageSize, size) => size;\n","export const clamp = (value, max) => Math.max(Math.min(value, max), 0);\n","import { clamp } from './helpers';\n\nconst PAGE_HEADERS_OVERFLOW_ERROR =\n  'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows = (rows, pageSize, page) => (\n  pageSize ?\n    rows.slice(pageSize * page, pageSize * (page + 1)) :\n    rows\n);\n\nexport const rowsWithPageHeaders = (rows, pageSize, getRowLevelKey) => {\n  if (!pageSize || !getRowLevelKey) return rows;\n\n  let result = rows.slice();\n\n  let headerRows = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const rowCount = rows => rows.length;\n\nexport const pageCount = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const currentPage = (page, totalCount, pageSize, setCurrentPage) => {\n  const totalPages = pageCount(totalCount, pageSize);\n  const adjustedCurrentPage = clamp(page, totalPages - 1);\n  if (page !== adjustedCurrentPage) {\n    setTimeout(() => setCurrentPage(adjustedCurrentPage));\n  }\n  return adjustedCurrentPage;\n};\n","export const firstRowOnPage = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nexport const calculateStartPage = (currentPage, maxButtonCount, totalPageCount) => Math.max(\n  Math.min(\n    currentPage - Math.floor(maxButtonCount / 2, 10),\n    (totalPageCount - maxButtonCount) + 1,\n  ),\n  1,\n);\n","export const toggle = (source, items, state) => {\n  const itemsSet = new Set(items);\n\n  let sourceState = state;\n  if (sourceState === undefined) {\n    const availableSelection = source.filter(item => itemsSet.has(item));\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    const sourceSet = new Set(source);\n    return [\n      ...source,\n      ...items.filter(item => !sourceSet.has(item)),\n    ];\n  }\n\n  return source.filter(item => !itemsSet.has(item));\n};\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleSelection = (selection, { rowIds, state }) =>\n  toggle(selection, rowIds, state);\n","export const rowsWithAvailableToSelect = (rows, getRowId, isGroupRow) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return { rows, availableToSelect: dataRows.map(row => getRowId(row)) };\n};\n\nexport const someSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const unwrapSelectedRows = ({ rows }) => rows;\n","export const startEditRows = (prevEditingRowIds, { rowIds }) =>\n  [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows = (prevEditingRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const addRow = (addedRows, { row } = { row: {} }) => [...addedRows, row];\n\nexport const changeAddedRow = (addedRows, { rowId, change }) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows = (addedRows, { rowIds }) => {\n  const result = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow = (prevRowChanges, { rowId, change }) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges = (prevRowChanges, { rowIds }) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows = (deletedRowIds, { rowIds }) => [...deletedRowIds, ...rowIds];\n\nexport const cancelDeletedRows = (deletedRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n","export const changedRowsByIds = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange = (row, value, columnName) => ({ [columnName]: value });\nexport const createRowChangeGetter = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n","export const getRowChange = (rowChanges, rowId) => rowChanges[rowId] || {};\n","export const TABLE_REORDERING_TYPE = 'reordering';\n","export const changeColumnOrder = (order, { sourceColumnName, targetColumnName }) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = order.slice();\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n","export const TABLE_DATA_TYPE = 'data';\nexport const TABLE_NODATA_TYPE = 'nodata';\n","import mergeSort from '../../utils/merge-sort';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\n\nexport const orderedColumns = (tableColumns, order) =>\n  mergeSort(tableColumns, (a, b) => {\n    if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n    const aPos = order.indexOf(a.column.name);\n    const bPos = order.indexOf(b.column.name);\n    return aPos - bPos;\n  });\n\nexport const tableHeaderRowsWithReordering = tableHeaderRows => [\n  ...tableHeaderRows,\n  {\n    key: TABLE_REORDERING_TYPE,\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n];\n\nexport const draftOrder = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = order.slice();\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n","const UNSET_COLUMN_WIDTH_ERROR = [\n  'The \"$1\" column\\'s width is not specified.',\n  'The TableColumnResizing plugin requires that all columns have the specified width.',\n].join('\\n');\n\nconst specifyWidths = (tableColumns, widths, onAbsence) => {\n  if (!widths.length) return tableColumns;\n  return tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === 'data') {\n        const columnName = tableColumn.column.name;\n        const column = widths.find(el => el.columnName === columnName);\n        const width = column && column.width;\n        if (width === undefined) {\n          onAbsence(columnName);\n          acc.push(tableColumn);\n        } else {\n          acc.push({ ...tableColumn, width });\n        }\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, []);\n};\n\nexport const tableColumnsWithWidths = (tableColumns, columnWidths) =>\n  specifyWidths(tableColumns, columnWidths, (columnName) => {\n    throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n  });\n\nexport const tableColumnsWithDraftWidths = (tableColumns, draftColumnWidths) =>\n  specifyWidths(tableColumns, draftColumnWidths, () => {});\n","export const changeTableColumnWidth = (state, { columnName, shift, minColumnWidth }) => {\n  const { columnWidths } = state;\n  const nextColumnWidth = columnWidths.slice();\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const updatedColumn = nextColumnWidth[index];\n  const size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth = (state, { columnName, shift, minColumnWidth }) => {\n  const { columnWidths } = state;\n  const updatedColumn = columnWidths.find(elem => elem.columnName === columnName);\n  const size = Math.max(minColumnWidth, updatedColumn.width + shift);\n\n  return {\n    draftColumnWidths: [{ columnName: updatedColumn.columnName, width: size }],\n  };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n","export const TABLE_EDIT_COMMAND_TYPE = 'editCommand';\n","export const TABLE_ADDED_TYPE = 'added';\nexport const TABLE_EDIT_TYPE = 'edit';\n","export const TABLE_HEADING_TYPE = 'heading';\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const isHeadingEditCommandsTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell = (tableRow, tableColumn) =>\n  (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n","import { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const tableColumnsWithEditing = (tableColumns, width) =>\n  [{ key: TABLE_EDIT_COMMAND_TYPE, type: TABLE_EDIT_COMMAND_TYPE, width }, ...tableColumns];\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isEditTableCell = (tableRow, tableColumn) =>\n  (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow = tableRow =>\n  tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow = tableRow =>\n  tableRow.type === TABLE_EDIT_TYPE;\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithEditing = (tableRows, editingRowIds, addedRows, rowHeight) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      key: `${TABLE_ADDED_TYPE}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n      row,\n    }));\n\n  return [\n    ...addedTableRows.reverse(),\n    ...editedTableRows,\n  ];\n};\n","export const TABLE_FILTER_TYPE = 'filter';\nexport const DEFAULT_FILTER_OPERATIONS = [\n  'contains',\n  'notContains',\n  'startsWith',\n  'endsWith',\n  'equal',\n  'notEqual',\n];\n","import { TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isFilterTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isFilterTableRow = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n\nexport const getColumnFilterOperations = (getAvailableFilterOperations, columnName) =>\n  (getAvailableFilterOperations && getAvailableFilterOperations(columnName))\n  || DEFAULT_FILTER_OPERATIONS;\n\nexport const isFilterValueEmpty = value => value === undefined || !String(value).length;\n","import { TABLE_FILTER_TYPE } from './constants';\n\nexport const tableHeaderRowsWithFilter = (headerRows, rowHeight) =>\n  [...headerRows, { key: TABLE_FILTER_TYPE, type: TABLE_FILTER_TYPE, height: rowHeight }];\n","export const TABLE_GROUP_TYPE = 'group';\n","import { TABLE_GROUP_TYPE } from './constants';\n\nexport const isGroupTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy === tableColumn.column.name;\nexport const isGroupIndentTableCell = (tableRow, tableColumn, grouping) => {\n  if (tableRow.type !== TABLE_GROUP_TYPE || tableColumn.type !== TABLE_GROUP_TYPE) return false;\n  if (tableRow.row.groupedBy === tableColumn.column.name) return false;\n  const rowGroupIndex = grouping.findIndex(columnGrouping =>\n    columnGrouping.columnName === tableRow.row.groupedBy);\n  const columnGroupIndex = grouping.findIndex(columnGrouping =>\n    columnGrouping.columnName === tableColumn.column.name);\n  return columnGroupIndex < rowGroupIndex;\n};\nexport const isGroupTableRow = tableRow => tableRow.type === TABLE_GROUP_TYPE;\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\n\nconst tableColumnsWithDraftGrouping =\n  (tableColumns, grouping, draftGrouping, showColumnWhenGrouped) => tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type !== TABLE_DATA_TYPE) {\n        acc.push(tableColumn);\n        return acc;\n      }\n\n      const columnName = tableColumn.column.name;\n      const columnGroupingExists = grouping\n        .some(columnGrouping => columnGrouping.columnName === columnName);\n      const columnDraftGroupingExists = draftGrouping\n        .some(columnGrouping => columnGrouping.columnName === columnName);\n\n      if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n        acc.push(tableColumn);\n      } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n        acc.push({\n          ...tableColumn,\n          draft: true,\n        });\n      }\n      return acc;\n    }, []);\n\nexport const tableColumnsWithGrouping = (\n  columns,\n  tableColumns,\n  grouping,\n  draftGrouping,\n  indentColumnWidth,\n  showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE}_${groupedColumn.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping = (tableRows, isGroupRow) =>\n  tableRows.map((tableRow) => {\n    if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n      return tableRow;\n    }\n    return {\n      ...tableRow,\n      key: `${TABLE_GROUP_TYPE}_${tableRow.row.compoundKey}`,\n      type: TABLE_GROUP_TYPE,\n    };\n  });\n\nexport const tableGroupCellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n    && tableRow.row.groupedBy === tableColumn.column.name) {\n    return tableColumns.length - tableColumns.indexOf(tableColumn);\n  }\n  return getTableCellColSpan(params);\n};\n","import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isHeadingTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow = tableRow => (tableRow.type === TABLE_HEADING_TYPE);\n","import { TABLE_HEADING_TYPE } from './constants';\n\nexport const tableRowsWithHeading = headerRows =>\n  [{ key: TABLE_HEADING_TYPE, type: TABLE_HEADING_TYPE }, ...headerRows];\n","export const TABLE_BAND_TYPE = 'tableBand';\nexport const BAND_GROUP_CELL = 'bandGroupCell';\nexport const BAND_HEADER_CELL = 'bandHeaderCell';\nexport const BAND_EMPTY_CELL = 'bandEmptyCell';\nexport const BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\n","import { TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isBandedTableRow = tableRow => (tableRow.type === TABLE_BAND_TYPE);\nexport const isBandedOrHeaderRow = tableRow =>\n  isBandedTableRow(tableRow) || tableRow.type === TABLE_HEADING_TYPE;\n\nexport const getColumnMeta = (\n  columnName, bands, tableRowLevel,\n  level = 0, title = null, result = null,\n) => bands.reduce((acc, column) => {\n  if (column.columnName === columnName) {\n    acc.title = title;\n    acc.level = level;\n    return acc;\n  }\n  if (column.children !== undefined) {\n    return getColumnMeta(\n      columnName,\n      column.children,\n      tableRowLevel,\n      level + 1,\n      level > tableRowLevel ? title : column.title,\n      acc,\n    );\n  }\n  return acc;\n}, result || { level, title });\n\nexport const getColSpan =\n  (currentColumnIndex, tableColumns, columnBands, currentRowLevel, currentColumnTitle) => {\n    let isOneChain = true;\n    return tableColumns.reduce((acc, tableColumn, index) => {\n      if (tableColumn.type !== TABLE_DATA_TYPE || index <= currentColumnIndex) return acc;\n      const columnMeta = getColumnMeta(tableColumn.column.name, columnBands, currentRowLevel);\n      if (isOneChain && columnMeta.title === currentColumnTitle) {\n        return acc + 1;\n      }\n      isOneChain = false;\n      return acc;\n    }, 1);\n  };\n\nexport const getBandComponent = (params, tableHeaderRows, tableColumns, columnBands) => {\n  if (params.rowSpan) return { type: BAND_DUPLICATE_RENDER, payload: null };\n\n  const maxLevel = tableHeaderRows.filter(column => column.type === TABLE_BAND_TYPE).length + 1;\n  const currentRowLevel = params.tableRow.level === undefined\n    ? maxLevel - 1 : params.tableRow.level;\n  const currentColumnMeta = params.tableColumn.type === TABLE_DATA_TYPE\n    ? getColumnMeta(params.tableColumn.column.name, columnBands, currentRowLevel)\n    : { level: 0, title: '' };\n\n  if (currentColumnMeta.level < currentRowLevel) return { type: BAND_EMPTY_CELL, payload: null };\n  if (currentColumnMeta.level === currentRowLevel) {\n    return {\n      type: BAND_HEADER_CELL,\n      payload: {\n        tableRow: tableHeaderRows.find(row => row.type === TABLE_HEADING_TYPE),\n        rowSpan: maxLevel - currentRowLevel,\n      },\n    };\n  }\n\n  const currentColumnIndex = tableColumns.findIndex(tableColumn =>\n    tableColumn.key === params.tableColumn.key);\n  if (currentColumnIndex > 0 && tableColumns[currentColumnIndex - 1].type === TABLE_DATA_TYPE) {\n    const prevColumnMeta = getColumnMeta(\n      tableColumns[currentColumnIndex - 1].column.name,\n      columnBands,\n      currentRowLevel,\n    );\n    if (prevColumnMeta.title === currentColumnMeta.title) return { type: null, payload: null };\n  }\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: {\n      colSpan: getColSpan(\n        currentColumnIndex,\n        tableColumns,\n        columnBands,\n        currentRowLevel,\n        currentColumnMeta.title,\n      ),\n      value: currentColumnMeta.title,\n      column: currentColumnMeta,\n    },\n  };\n};\n","import { TABLE_BAND_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithBands = (tableHeaderRows, columnBands, tableColumns) => {\n  const tableDataColumns = tableColumns.filter(column => column.type === TABLE_DATA_TYPE);\n  const getMaxNestedLevel = (bands, level = 0, result = null) =>\n    bands.reduce((acc, column) => {\n      if (column.children !== undefined) {\n        return getMaxNestedLevel(column.children, level + 1, acc);\n      }\n      const isDataColumn = tableDataColumns.findIndex(dataColumn =>\n        dataColumn.column.name === column.columnName) > -1;\n      if (level > acc.level && isDataColumn) {\n        acc.level = level;\n        return acc;\n      }\n      return acc;\n    }, result || { level: 0 });\n\n  const tableBandHeaders = Array.from({ length: getMaxNestedLevel(columnBands, 0).level })\n    .map((row, index) => ({ key: `${TABLE_BAND_TYPE}_${index}`, type: TABLE_BAND_TYPE, level: index }));\n  return [...tableBandHeaders, ...tableHeaderRows];\n};\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleDetailRowExpanded = (prevExpanded, { rowId, state }) =>\n  toggle(prevExpanded, [rowId], state);\n","export const TABLE_DETAIL_TYPE = 'detail';\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isDetailRowExpanded = (expandedDetailRowIds, rowId) =>\n  expandedDetailRowIds.indexOf(rowId) > -1;\nexport const isDetailToggleTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isDetailTableRow = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\nexport const isDetailTableCell = (tableColumn, tableColumns) =>\n  tableColumns.indexOf(tableColumn) === 0;\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithExpandedDetail = (tableRows, expandedDetailRowIds, rowHeight) => {\n  let result = tableRows;\n  expandedDetailRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(tableRow =>\n        tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId);\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          key: `${TABLE_DETAIL_TYPE}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          rowId,\n          row,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail = (tableColumns, toggleColumnWidth) => [\n  { key: TABLE_DETAIL_TYPE, type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n\nexport const tableDetailCellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return getTableCellColSpan(params);\n};\n","export const TABLE_SELECT_TYPE = 'select';\n","import { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isSelectTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell = (tableRow, tableColumn) =>\n  tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n","import { TABLE_SELECT_TYPE } from './constants';\n\nexport const tableColumnsWithSelection = (tableColumns, selectionColumnWidth) => [\n  { key: TABLE_SELECT_TYPE, type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n  ...tableColumns,\n];\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\n\nexport const isDataTableCell = (tableRow, tableColumn) =>\n  tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell = (tableRow, headerRows) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow = tableRow => tableRow.type === TABLE_DATA_TYPE;\nexport const isNoDataTableRow = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isNoDataTableCell = (tableColumn, tableColumns) =>\n  tableColumns.indexOf(tableColumn) === 0;\n","export const getColumnExtension = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    return {};\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    return {};\n  }\n  return columnExtension;\n};\n\nexport const getColumnExtensionValueGetter = (columnExtensions, extensionName, defaultValue) =>\n  (columnName) => {\n    if (columnExtensions) {\n      const columnExtension = getColumnExtension(columnExtensions, columnName);\n      const extensionValue = columnExtension[extensionName];\n      return extensionValue !== undefined ? extensionValue : defaultValue;\n    }\n    return defaultValue;\n  };\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column-extension';\n\nexport const tableColumnsWithDataRows = (columns, columnExtensions) =>\n  columns.map((column) => {\n    const { name } = column;\n    const columnExtension = getColumnExtension(columnExtensions, name);\n    return {\n      key: `${TABLE_DATA_TYPE}_${name}`,\n      type: TABLE_DATA_TYPE,\n      width: columnExtension.width,\n      align: columnExtension.align,\n      wordWrapEnabled: columnExtension.wordWrapEnabled,\n      column,\n    };\n  });\n\nexport const tableRowsWithDataRows = (rows, getRowId) => (\n  !rows.length\n    ? [{ key: TABLE_NODATA_TYPE, type: TABLE_NODATA_TYPE }]\n    : rows.map((row) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE}_${rowId}`,\n      };\n    }));\n\nexport const tableCellColSpanGetter = (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return 1;\n};\n","import { TABLE_DATA_TYPE } from './../table/constants';\n\nexport const visibleTableColumns = (tableColumns, hiddenColumnNames) =>\n  tableColumns.filter(tableColumn =>\n    tableColumn.type !== TABLE_DATA_TYPE ||\n    hiddenColumnNames.indexOf(tableColumn.column.name) === -1);\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableDataColumnsExist = tableColumns =>\n  tableColumns.some(column => column.type === TABLE_DATA_TYPE);\n","export const columnChooserItems = (columns, hiddenColumnNames) =>\n  columns.map(column => ({ column, hidden: hiddenColumnNames.indexOf(column.name) !== -1 }));\n","export const toggleColumn = (hiddenColumnNames, columnName) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleRowExpanded = (prevExpanded, { rowId, state }) =>\n  toggle(prevExpanded, [rowId], state);\n","export const GRID_TREE_NODE_TYPE = 'treeNode';\n","import { GRID_TREE_NODE_TYPE } from './constants';\n\nconst customTreeRows = (\n  currentRow,\n  getChildRows,\n  rootRows,\n  level = 0,\n) => {\n  const childRows = getChildRows(currentRow, rootRows);\n\n  if (!childRows) return { rows: [], treeMeta: [], empty: true };\n\n  return childRows\n    .reduce((acc, row) => {\n      const nestedResult = customTreeRows(\n        row,\n        getChildRows,\n        rootRows,\n        level + 1,\n      );\n      acc.rows.push(row, ...nestedResult.rows);\n      acc.treeMeta.push([row, { level, leaf: !!nestedResult.empty }], ...nestedResult.treeMeta);\n\n      return acc;\n    }, { rows: [], treeMeta: [] });\n};\n\nexport const customTreeRowsWithMeta = (\n  rows,\n  getChildRows,\n) => {\n  const result = customTreeRows(null, getChildRows, rows);\n\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta),\n  };\n};\n\nexport const customTreeRowIdGetter = (getRowId, { rows, treeMeta }) => {\n  const firstNestedRowIndex = rows.findIndex(row => treeMeta.get(row).level > 0);\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .map((row, rowIndex) => [row, rowIndex]));\n  return row => map.get(row);\n};\n\nexport const customTreeRowLevelKeyGetter = (getRowLevelKey, { treeMeta }) =>\n  (row) => {\n    const rowMeta = treeMeta.get(row);\n    if (rowMeta !== undefined) {\n      return `${GRID_TREE_NODE_TYPE}_${rowMeta.level}`;\n    }\n    return getRowLevelKey && getRowLevelKey();\n  };\n\nexport const expandedTreeRows = ({ rows, treeMeta }, getRowId, expandedRowIds) => {\n  const expandedRowIdsSet = new Set(expandedRowIds);\n\n  let currentExpanded = true;\n  let currentLevel = 0;\n  return rows.reduce((acc, row) => {\n    const rowMeta = treeMeta.get(row);\n    const level = rowMeta && rowMeta.level;\n    if (level === undefined && currentExpanded) {\n      acc.rows.push(row);\n      return acc;\n    }\n\n    if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      const lastRow = acc.rows[acc.rows.length - 1];\n      let collapsedItems = acc.collapsedRowsMeta.get(lastRow);\n      if (!collapsedItems) {\n        collapsedItems = [];\n        acc.collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n      collapsedItems.push(row);\n      return acc;\n    }\n\n    currentExpanded = expandedRowIdsSet.has(getRowId(row));\n    currentLevel = level;\n\n    acc.rows.push(row);\n\n    return acc;\n  }, { rows: [], treeMeta, collapsedRowsMeta: new Map() });\n};\n\nexport const collapsedTreeRowsGetter = (getCollapsedRows, { collapsedRowsMeta }) =>\n  row => collapsedRowsMeta.get(row) || (getCollapsedRows && getCollapsedRows(row));\n\nexport const isTreeRowLeafGetter = ({ treeMeta }) =>\n  (row) => {\n    const rowMeta = treeMeta.get(row);\n    return rowMeta && rowMeta.leaf;\n  };\n\nexport const getTreeRowLevelGetter = ({ treeMeta }) =>\n  (row) => {\n    const rowMeta = treeMeta.get(row);\n    return rowMeta && rowMeta.level;\n  };\n\nexport const unwrappedCustomTreeRows = ({ rows }) => rows;\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isTreeTableCell = (tableRow, tableColumn, forColumnName) =>\n  tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE\n  && tableColumn.column.name === forColumnName;\n","export const changeSearchValue = (prevSearchValue, searchValue) => searchValue;\n","export const searchFilterExpression = (searchValue, columns, filterExpression) => {\n  const filters = columns.map(({ name }) => ({ columnName: name, value: searchValue }));\n  const selfFilterExpression = { operator: 'or', filters };\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpression],\n  };\n};\n","export const getAvailableFilterOperationsGetter = (\n  getAvailableFilterOperations,\n  availableFilterOperations,\n  columnNames,\n) =>\n  columnName => (columnNames.indexOf(columnName) > -1 && availableFilterOperations)\n    || (typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName))\n    || undefined;\n","export const getTargetColumnGeometries = (columnGeometries, sourceIndex) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = index =>\n    columnGeometries[index].right - columnGeometries[index].left - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        right: rightBorder,\n        bottom,\n        left: leftBorder,\n      };\n    });\n};\n","import { easeOutCubic } from '@devexpress/dx-core';\nimport { getTargetColumnGeometries } from './column-geometries';\n\nexport const getTableColumnGeometries = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce((accum, width) => accum + (width || 0), 0);\n  const freeSpacePortions = columnWidths\n    .reduce((accum, width) => accum + (width === undefined ? 1 : 0), 0);\n  const freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (width === undefined ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex = (columnGeometries, sourceIndex, offset) =>\n  getTargetColumnGeometries(columnGeometries, sourceIndex)\n    .findIndex(({ left, right }) => offset > left && offset < right);\n\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = animation =>\n  (new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  if (prevColumns.map(c => c.key).join('') === nextColumns.map(c => c.key).join('')) {\n    return new Map();\n  }\n\n  const prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth)\n    .map((geometry, index) => [prevColumns[index].key, geometry])\n    .map(([key, geometry]) => {\n      const animation = prevAnimations.get(key);\n      if (!animation) return [key, geometry];\n      const progress = easeOutCubic(getAnimationProgress(animation));\n      const left = ((animation.left.to - animation.left.from) * progress) + animation.left.from;\n      return [key, {\n        left,\n        right: geometry.right - (geometry.left - left),\n      }];\n    }));\n\n  const nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth)\n    .map((geometry, index) => [nextColumns[index].key, geometry]));\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev = prevColumnGeometries.get(key);\n      const next = nextColumnGeometries.get(key);\n\n      const result = { startTime: new Date().getTime(), style: {} };\n      if (Math.abs(prev.left - next.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result];\n    })\n    .filter(animation => animation[1].left));\n};\n\nexport const filterActiveAnimations = animations => new Map([...animations.entries()]\n  .filter(([, animation]) => getAnimationProgress(animation) < 1));\n\nexport const evalAnimations = animations => new Map([...animations.entries()]\n  .map(([key, animation]) => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n","import { getTargetColumnGeometries } from './column-geometries';\n\nconst isOnTheSameLine = (geometry, y) => y >= geometry.top && y <= geometry.bottom;\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems = geometries =>\n  geometries.map((geometry, index) => {\n    if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n      return {\n        ...geometry,\n        right: geometries[index + 1].left,\n      };\n    }\n    return geometry;\n  });\n\nexport const getGroupCellTargetIndex = (geometries, sourceIndex, { x, y }) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds &&\n        !!geometries[index - 1] &&\n        isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds) ||\n        shouldGoFirst ||\n        shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n","const processPattern = (pattern, params) =>\n  Object.keys(params).reduce(\n    (msg, key) =>\n      msg.replace(`{${key}}`, params[key]),\n    pattern,\n  );\n\nexport const getMessagesFormatter = messages => (key, params) => {\n  const message = messages[key];\n\n  if (typeof message === 'function') {\n    return message(params);\n  }\n  if (params) {\n    return processPattern(message, params);\n  }\n  return message;\n};\n","export const STUB_TYPE = 'stub';\nexport const VISIBLE_TYPE = 'visible';\n\nexport const getVisibleBoundary = (items, viewportStart, viewportSize, getItemSize, overscan) => {\n  let start = null;\n  let end = null;\n\n  const viewportEnd = viewportStart + viewportSize;\n  let index = 0;\n  let beforePosition = 0;\n  while (end === null && index < items.length) {\n    const item = items[index];\n    const afterPosition = beforePosition + getItemSize(item);\n    const isVisible = (beforePosition >= viewportStart && beforePosition < viewportEnd) ||\n      (afterPosition > viewportStart && afterPosition <= viewportEnd) ||\n      (beforePosition < viewportStart && afterPosition > viewportEnd);\n    if (isVisible && start === null) {\n      start = index;\n    }\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n    index += 1;\n    beforePosition = afterPosition;\n  }\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  if (overscan) {\n    start = Math.max(0, start - overscan);\n    end = Math.min(items.length - 1, end + overscan);\n  }\n\n  return [start, end];\n};\n\nexport const getSpanBoundary = (items, visibleBoundary, getItemSpan) => {\n  let start = visibleBoundary[0];\n  let end = visibleBoundary[1];\n\n  for (let index = 0; index <= visibleBoundary[1]; index += 1) {\n    const span = getItemSpan(items[index]);\n    if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n      start = index;\n    }\n    if (index + (span - 1) > visibleBoundary[1]) {\n      end = index + (span - 1);\n    }\n  }\n\n  return [start, end];\n};\n\nexport const collapseBoundaries = (itemsCount, visibleBoundary, spanBoundaries) => {\n  const beforePoints = new Set([0, visibleBoundary[0]]);\n  const afterPoints = new Set([visibleBoundary[1], itemsCount - 1]);\n  spanBoundaries.forEach((boundary) => {\n    beforePoints.add(boundary[0]);\n    afterPoints.add(boundary[1]);\n  });\n\n  const boundaries = [];\n\n  let lastBeforePoint = null;\n  Array.from(beforePoints).sort((a, b) => a - b).forEach((point) => {\n    if (lastBeforePoint === null) {\n      lastBeforePoint = point;\n      return;\n    }\n    boundaries.push([lastBeforePoint, point - 1]);\n    lastBeforePoint = point;\n  });\n\n  for (let index = visibleBoundary[0]; index <= visibleBoundary[1]; index += 1) {\n    boundaries.push([index, index]);\n  }\n\n  let lastAfterPoint = null;\n  Array.from(afterPoints).sort((a, b) => a - b).forEach((point) => {\n    if (lastAfterPoint === null) {\n      lastAfterPoint = point;\n      return;\n    }\n    boundaries.push([lastAfterPoint + 1, point]);\n    lastAfterPoint = point;\n  });\n\n  return boundaries;\n};\n\nconst getColumnsSize = (columns, startIndex, endIndex, getColumnSize) => {\n  let size = 0;\n  let index;\n  const loopEndIndex = endIndex + 1;\n  for (index = startIndex; index < loopEndIndex; index += 1) {\n    size += getColumnSize(columns[index], 0);\n  }\n  return size;\n};\n\nexport const getCollapsedColumns = (columns, visibleBoundary, boundaries, getColumnWidth) => {\n  const collapsedColumns = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const column = columns[boundary[0]];\n      collapsedColumns.push(column);\n    } else {\n      collapsedColumns.push({\n        key: `${STUB_TYPE}_${boundary[0]}_${boundary[1]}`,\n        type: STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth),\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedRows = (rows, visibleBoundary, boundaries, getRowHeight, getCells) => {\n  const collapsedColumns = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const row = rows[boundary[0]];\n      collapsedColumns.push({\n        row,\n        cells: getCells(row),\n      });\n    } else {\n      collapsedColumns.push({\n        row: {\n          type: STUB_TYPE,\n          key: `${STUB_TYPE}_${boundary[0]}_${boundary[1]}`,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight),\n        },\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedCells = (columns, spanBoundary, boundaries, getColSpan) => {\n  const collapsedColumns = [];\n  let index = 0;\n  while (index < boundaries.length) {\n    const boundary = boundaries[index];\n    const isSpan = spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1];\n    if (isSpan) {\n      const column = columns[boundary[0]];\n      const realColSpan = getColSpan(column);\n      const realColSpanEnd = (realColSpan + boundary[0]) - 1;\n      const colSpanEnd = boundaries.findIndex(colSpanBoundary =>\n        colSpanBoundary[0] <= realColSpanEnd && realColSpanEnd <= colSpanBoundary[1]);\n      collapsedColumns.push({\n        column,\n        colSpan: (colSpanEnd - index) + 1,\n      });\n      index += 1;\n    } else {\n      collapsedColumns.push({\n        column: {\n          key: `${STUB_TYPE}_${boundary[0]}_${boundary[1]}`,\n          type: STUB_TYPE,\n        },\n        colSpan: 1,\n      });\n      index += 1;\n    }\n  }\n  return collapsedColumns;\n};\n\nexport const getCollapsedGrid = ({\n  rows,\n  columns,\n  top,\n  height,\n  left,\n  width,\n  getColumnWidth = column => column.width,\n  getRowHeight = row => row.height,\n  getColSpan = () => 1,\n}) => {\n  if (!rows.length || !columns.length) {\n    return {\n      columns: [],\n      rows: [],\n    };\n  }\n  const rowsVisibleBoundary = getVisibleBoundary(rows, top, height, getRowHeight, 3);\n  const columnsVisibleBoundary = getVisibleBoundary(columns, left, width, getColumnWidth, 1);\n\n  const rowSpanBoundaries = rows\n    .slice(rowsVisibleBoundary[0], rowsVisibleBoundary[1])\n    .map(row => getSpanBoundary(\n      columns,\n      columnsVisibleBoundary,\n      column => getColSpan(row, column),\n    ));\n  const columnBoundaries = collapseBoundaries(\n    columns.length,\n    columnsVisibleBoundary,\n    rowSpanBoundaries,\n  );\n\n  const rowBoundaries = collapseBoundaries(rows.length, rowsVisibleBoundary, []);\n\n  return {\n    columns: getCollapsedColumns(\n      columns,\n      columnsVisibleBoundary,\n      columnBoundaries,\n      getColumnWidth,\n    ),\n    rows: getCollapsedRows(\n      rows,\n      rowsVisibleBoundary,\n      rowBoundaries,\n      getRowHeight,\n      row => getCollapsedCells(\n        columns,\n        getSpanBoundary(\n          columns,\n          columnsVisibleBoundary,\n          column => getColSpan(row, column),\n        ),\n        columnBoundaries,\n        column => getColSpan(row, column),\n      ),\n    ),\n  };\n};\n"],"names":["rowIdGetter","getRowId","rows","map","Map","row","rowIndex","get","defaultGetCellValue","columnName","cellValueGetter","getCellValue","columns","useFastAccessor","reduce","acc","column","name","changeColumnSorting","state","direction","keepOther","sortIndex","sorting","nextSorting","slice","Array","isArray","filter","indexOf","columnSorting","columnSortingIndex","findIndex","newColumnSorting","splice","newIndexFallback","length","newIndex","undefined","unique","Set","arr","getColumnSortingDirection","s","getPersistentSortedColumns","columnExtensions","sortingEnabled","sortItem","push","calculateKeepOther","persistentSortedColumns","item","merge","array","auxiliary","lo","mid","hi","compare","i","j","k","cmp","sortArrayToAuxiliary","Math","floor","sortAuxiliaryToArray","a","b","result","NODE_CHECK","Symbol","rowsToTree","getRowLevelKey","levels","children","forEach","levelKey","levelIndex","level","root","node","treeToRows","tree","defaultCompare","createCompare","getColumnCompare","getComparableValue","reverse","prevCompare","inverse","columnCompare","aRow","bRow","sortTree","sortedTree","mergeSort","sortHierarchicalRows","sortedRows","isGroupRow","groupedBy","value","changeColumnFilter","filters","config","filterIndex","f","nextState","getColumnFilterConfig","filterExpression","expression","selfFilterExpr","operator","AND","predicates","predicate","OR","operators","or","and","toLowerCase","String","operationPredicates","startsWith","endsWith","defaultFilterPredicate","operation","filterTree","filteredChildren","filterHierarchicalRows","getCollapsedRows","collapsedRowsMeta","filteredTree","isNode","collapsedRows","filteredCollapsedRows","buildPredicate","initialFilterExpression","getColumnPredicate","getSimplePredicate","customPredicate","getOperatorPredicate","build","getPredicate","filteredRows","Object","keys","filteredCollapsedRowsGetter","unwrappedFilteredRows","GROUP_KEY_SEPARATOR","applyColumnGrouping","grouping","groupIndex","nextGrouping","groupingIndex","g","targetIndex","changeColumnGrouping","expandedGroups","ungroupedColumnIndex","group","index","filteredExpandedGroups","split","toggleExpandedGroups","groupKey","groupKeyIndex","draftColumnGrouping","draftGrouping","cancelColumnGroupingDraft","adjustSortIndex","max","columnGrouping","GRID_GROUP_TYPE","GRID_GROUP_CHECK","GRID_GROUP_LEVEL_KEY","GRID_GROUP_COLLAPSED_ROWS","groupRowChecker","groupRowLevelKeyGetter","defaultColumnCriteria","groupedRows","getColumnCriteria","keyPrefix","groupCriteria","groups","key","sameKeyItems","set","nestedGrouping","values","items","compoundKey","expandedGroupRows","groupingColumnNames","expandedGroupsSet","currentGroupExpanded","currentGroupLevel","groupLevel","has","groupCollapsedRowsGetter","customGroupedRows","currentRows","getChildGroups","rootRows","childRows","customGroupingRowIdGetter","firstRow","find","groupingPanelItems","c","some","setCurrentPage","prevPage","page","setPageSize","prevPageSize","size","clamp","min","PAGE_HEADERS_OVERFLOW_ERROR","paginatedRows","pageSize","rowsWithPageHeaders","headerRows","currentIndex","headerIndex","headerRow","Error","indexInPage","rowCount","pageCount","count","ceil","currentPage","totalCount","totalPages","adjustedCurrentPage","firstRowOnPage","lastRowOnPage","totalRowCount","calculateStartPage","maxButtonCount","totalPageCount","toggle","source","itemsSet","sourceState","availableSelection","sourceSet","toggleSelection","selection","rowIds","rowsWithAvailableToSelect","dataRows","availableToSelect","someSelected","selectionSet","elem","allSelected","unwrapSelectedRows","startEditRows","prevEditingRowIds","stopEditRows","rowIdSet","id","addRow","addedRows","changeAddedRow","rowId","change","cancelAddedRows","indexSet","changeRow","prevRowChanges","prevChange","cancelChanges","deleteRows","deletedRowIds","cancelDeletedRows","changedRowsByIds","changes","addedRowsByIds","defaultCreateRowChange","createRowChangeGetter","createRowChange","columnExtension","getRowChange","rowChanges","TABLE_REORDERING_TYPE","changeColumnOrder","order","sourceColumnName","targetColumnName","sourceColumnIndex","targetColumnIndex","newOrder","TABLE_DATA_TYPE","TABLE_NODATA_TYPE","orderedColumns","tableColumns","type","aPos","bPos","tableHeaderRowsWithReordering","tableHeaderRows","draftOrder","sourceColumn","UNSET_COLUMN_WIDTH_ERROR","join","specifyWidths","widths","onAbsence","tableColumn","el","width","tableColumnsWithWidths","columnWidths","replace","tableColumnsWithDraftWidths","draftColumnWidths","changeTableColumnWidth","shift","minColumnWidth","nextColumnWidth","updatedColumn","draftTableColumnWidth","cancelTableColumnWidthDraft","TABLE_EDIT_COMMAND_TYPE","TABLE_ADDED_TYPE","TABLE_EDIT_TYPE","TABLE_HEADING_TYPE","isHeadingEditCommandsTableCell","tableRow","isEditCommandsTableCell","tableColumnsWithEditing","isEditTableCell","isAddedTableRow","isEditTableRow","tableRowsWithEditing","tableRows","editingRowIds","rowHeight","editedTableRows","addedTableRows","TABLE_FILTER_TYPE","DEFAULT_FILTER_OPERATIONS","isFilterTableCell","isFilterTableRow","getColumnFilterOperations","getAvailableFilterOperations","isFilterValueEmpty","tableHeaderRowsWithFilter","height","TABLE_GROUP_TYPE","isGroupTableCell","isGroupIndentTableCell","rowGroupIndex","columnGroupIndex","isGroupTableRow","tableColumnsWithDraftGrouping","showColumnWhenGrouped","columnGroupingExists","columnDraftGroupingExists","tableColumnsWithGrouping","indentColumnWidth","groupedColumn","tableRowsWithGrouping","tableGroupCellColSpanGetter","params","getTableCellColSpan","isHeadingTableCell","isHeadingTableRow","tableRowsWithHeading","TABLE_BAND_TYPE","BAND_GROUP_CELL","BAND_HEADER_CELL","BAND_EMPTY_CELL","BAND_DUPLICATE_RENDER","isBandedTableRow","isBandedOrHeaderRow","getColumnMeta","bands","tableRowLevel","title","getColSpan","currentColumnIndex","columnBands","currentRowLevel","currentColumnTitle","isOneChain","columnMeta","getBandComponent","rowSpan","payload","maxLevel","currentColumnMeta","prevColumnMeta","tableRowsWithBands","tableDataColumns","getMaxNestedLevel","isDataColumn","dataColumn","tableBandHeaders","from","toggleDetailRowExpanded","prevExpanded","TABLE_DETAIL_TYPE","isDetailRowExpanded","expandedDetailRowIds","isDetailToggleTableCell","isDetailTableRow","isDetailTableCell","tableRowsWithExpandedDetail","expandedRowId","insertIndex","tableColumnsWithDetail","toggleColumnWidth","tableDetailCellColSpanGetter","TABLE_SELECT_TYPE","isSelectTableCell","isSelectAllTableCell","tableColumnsWithSelection","selectionColumnWidth","isDataTableCell","isHeaderStubTableCell","isDataTableRow","isNoDataTableRow","isNoDataTableCell","getColumnExtension","extension","getColumnExtensionValueGetter","extensionName","defaultValue","extensionValue","tableColumnsWithDataRows","align","wordWrapEnabled","tableRowsWithDataRows","tableCellColSpanGetter","visibleTableColumns","hiddenColumnNames","tableDataColumnsExist","columnChooserItems","hidden","toggleColumn","hiddenColumn","toggleRowExpanded","GRID_TREE_NODE_TYPE","customTreeRows","currentRow","getChildRows","treeMeta","empty","nestedResult","leaf","customTreeRowsWithMeta","customTreeRowIdGetter","firstNestedRowIndex","customTreeRowLevelKeyGetter","rowMeta","expandedTreeRows","expandedRowIds","expandedRowIdsSet","currentExpanded","currentLevel","lastRow","collapsedItems","collapsedTreeRowsGetter","isTreeRowLeafGetter","getTreeRowLevelGetter","unwrappedCustomTreeRows","isTreeTableCell","forColumnName","changeSearchValue","prevSearchValue","searchValue","searchFilterExpression","selfFilterExpression","getAvailableFilterOperationsGetter","availableFilterOperations","columnNames","getTargetColumnGeometries","columnGeometries","sourceIndex","sourceWidth","right","left","getWidthDifference","top","bottom","leftBorder","rightBorder","getTableColumnGeometries","tableWidth","freeSpace","restrictedSpace","accum","freeSpacePortions","freeSpacePortion","lastRightPosition","getTableTargetColumnIndex","offset","ANIMATION_DURATION","getAnimationProgress","Date","getTime","animation","startTime","getAnimations","prevColumns","nextColumns","prevAnimations","prevColumnGeometries","geometry","progress","easeOutCubic","to","nextColumnGeometries","prev","next","style","abs","filterActiveAnimations","animations","entries","evalAnimations","transform","isOnTheSameLine","y","rectToObject","collapseGapsBetweenItems","geometries","getGroupCellTargetIndex","x","targetGeometries","inVerticalBounds","inHorizontalBounds","shouldGoFirst","shouldGoOnLineBreak","processPattern","pattern","msg","getMessagesFormatter","message","messages","STUB_TYPE","getVisibleBoundary","viewportStart","viewportSize","getItemSize","overscan","start","end","viewportEnd","beforePosition","afterPosition","isVisible","getSpanBoundary","visibleBoundary","getItemSpan","span","collapseBoundaries","itemsCount","spanBoundaries","beforePoints","afterPoints","boundary","add","boundaries","lastBeforePoint","sort","point","lastAfterPoint","getColumnsSize","startIndex","endIndex","getColumnSize","loopEndIndex","getCollapsedColumns","getColumnWidth","collapsedColumns","getRowHeight","getCells","getCollapsedCells","spanBoundary","isSpan","realColSpan","realColSpanEnd","colSpanEnd","colSpanBoundary","getCollapsedGrid","rowsVisibleBoundary","columnsVisibleBoundary","rowSpanBoundaries","columnBoundaries","rowBoundaries"],"mappings":"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"}