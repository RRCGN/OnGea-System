{"version":3,"sources":["../source/format.js"],"names":["format","format_national_number_using_format","choose_format_for_number","local_to_international_style","formatIDDSameCountryCallingCodeNumber","defaultOptions","formatExtension","number","extension","metadata","ext","arg_1","arg_2","arg_3","arg_4","arg_5","sort_out_arguments","input","format_type","options","country","hasCountry","phone","countryCallingCode","selectedCountry","chooseCountryByCountryCallingCode","format_national_number","add_extension","fromCountry","IDDPrefix","humanReadable","formattedForSameCountryCallingCode","FIRST_GROUP_PATTERN","international","enforce_national_prefix","format_pattern_matcher","RegExp","pattern","national_prefix_may_be_omitted","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","replace","formatted_number","internationalFormat","format_as","formats","available_formats","national_number","leadingDigitsPatterns","length","last_leading_digits_pattern","search","local","trim","Error","is_object","TypeError","_","toCountryCallingCode","toCountryMetadata","fromCountryMetadata"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport\r\n{\r\n\textractCountryCallingCode,\r\n\tVALID_PUNCTUATION,\r\n\tmatches_entirely\r\n}\r\nfrom './common'\r\n\r\nimport { getIDDPrefix } from './IDD'\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (number, extension, metadata) => `${number}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'International')\r\n// format('8005553535', 'RU', 'International', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'International')\r\n// format({ phone: '8005553535', country: 'RU' }, 'International', metadata)\r\n// format('+78005553535', 'National')\r\n// format('+78005553535', 'National', metadata)\r\n// ```\r\n//\r\nexport default function format(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat_type,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n\r\n\tif (input.country && metadata.hasCountry(input.country))\r\n\t{\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\r\n\t// `number` is a national (significant) number in this case.\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(input.phone, null, metadata)\r\n\r\n\tcountryCallingCode = countryCallingCode || input.countryCallingCode\r\n\r\n\tif (countryCallingCode)\r\n\t{\r\n\t\t// Check country restriction\r\n\t\tif (input.country && metadata.selectedCountry() &&\r\n\t\t\tcountryCallingCode !== metadata.countryCallingCode())\r\n\t\t{\r\n\t\t\treturn input.phone\r\n\t\t}\r\n\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\r\n\tif (!metadata.selectedCountry())\r\n\t{\r\n\t\treturn input.phone\r\n\t}\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\t\tif (!number) {\r\n\t\t\t\treturn `+${metadata.countryCallingCode()}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(number, 'International', false, metadata)\r\n\t\t\tnumber = `+${metadata.countryCallingCode()} ${number}`\r\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${metadata.countryCallingCode()}${input.phone}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${metadata.countryCallingCode()}${input.phone}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(number, countryCallingCode, options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${metadata.countryCallingCode()} ${format_national_number(number, 'International', false, metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${metadata.countryCallingCode()}${number}`\r\n\r\n\t\tcase 'National':\r\n\t\t\tif (!number) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(number, 'National', false, metadata)\r\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, metadata)\r\n{\r\n\tconst format_pattern_matcher = new RegExp(format.pattern())\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\tconst national_prefix_may_be_omitted = !format.nationalPrefixFormattingRule() ||\r\n\t\t(format.nationalPrefixFormattingRule() && format.nationalPrefixIsOptionalWhenFormatting() && !enforce_national_prefix)\r\n\r\n\tif (!international && !national_prefix_may_be_omitted)\r\n\t{\r\n\t\treturn number.replace\r\n\t\t(\r\n\t\t\tformat_pattern_matcher,\r\n\t\t\tformat.format().replace\r\n\t\t\t(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst formatted_number = number.replace\r\n\t(\r\n\t\tformat_pattern_matcher,\r\n\t\tinternational ? format.internationalFormat() : format.format()\r\n\t)\r\n\r\n\tif (international)\r\n\t{\r\n\t\treturn local_to_international_style(formatted_number)\r\n\t}\r\n\r\n\treturn formatted_number\r\n}\r\n\r\nfunction format_national_number(number, format_as, enforce_national_prefix, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\r\n\tif (!format)\r\n\t{\r\n\t\treturn number\r\n\t}\r\n\r\n\treturn format_national_number_using_format(number, format, format_as === 'International', enforce_national_prefix, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\nexport function local_to_international_style(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'National', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone   : arg_1,\r\n\t\t\t\tcountry : arg_2\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'National', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Will be `parse()`d later in code\r\n\t\t\tinput =\r\n\t\t\t{\r\n\t\t\t\tphone : arg_1\r\n\t\t\t}\r\n\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('Format type argument not passed for `format()`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'National', [options], metadata)`.\r\n\telse if (is_object(arg_1) && typeof arg_1.phone === 'string')\r\n\t{\r\n\t\tinput       = arg_1\r\n\t\tformat_type = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\t// Validate `format_type`.\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'International':\r\n\t\tcase 'E.164':\r\n\t\tcase 'National':\r\n\t\tcase 'RFC3966':\r\n\t\tcase 'IDD':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\treturn { input, format_type, options, metadata: new Metadata(metadata) }\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\nfunction add_extension(number, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(number, ext, metadata) : number\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'National', false, toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\treturn format_national_number(number, 'National', false, toCountryMetadata)\r\n\t}\r\n}"]}