{"version":3,"sources":["../source/AsYouType.js"],"names":["strip_dangling_braces","cut_stripping_dangling_braces","close_dangling_braces","count_occurences","repeat","DUMMY_DIGIT","DUMMY_DIGIT_MATCHER","RegExp","LONGEST_NATIONAL_PHONE_NUMBER_LENGTH","LONGEST_DUMMY_PHONE_NUMBER","DIGIT_PLACEHOLDER","DIGIT_PLACEHOLDER_MATCHER","DIGIT_PLACEHOLDER_MATCHER_GLOBAL","CHARACTER_CLASS_PATTERN","STANDALONE_DIGIT_PATTERN","ELIGIBLE_FORMAT_PATTERN","MIN_LEADING_DIGITS_LENGTH","VALID_INCOMPLETE_PHONE_NUMBER","VALID_INCOMPLETE_PHONE_NUMBER_PATTERN","AsYouType","country_code","metadata","options","hasCountry","default_country","reset","text","extracted_number","indexOf","test","current_output","process_input","input","parsed_input","reset_countriness","slice","national_number","is_international","countryCallingCode","extract_country_calling_code","initialize_phone_number_formats_for_this_country_calling_code","reset_format","determine_the_country","country","previous_national_prefix","national_prefix","extract_national_prefix","matching_formats","available_formats","should_format","format_as_non_formatted_number","match_formats_by_leading_digits","formatted_national_phone_number","format_national_phone_number","full_phone_number","template","length","next_digits","national_number_formatted_with_previous_format","chosen_format","format_next_national_number_digits","formatted_number","attempt_to_format_complete_phone_number","choose_another_format","reformat_national_number","undefined","reset_country","partially_populated_template","last_match_position","formats","filter","format","internationalFormat","leading_digits","index_of_leading_digits_pattern","leading_digits_pattern_count","leadingDigitsPatterns","leading_digits_pattern_index","Math","min","leading_digits_pattern","matcher","pattern","is_format_applicable","create_formatting_template","full_number","replace","formatted_national_number","number","chooseCountryByCountryCallingCode","selectedCountry","potential_national_number","possibleLengths","is_possible_number","nationalNumberPattern","validation_result","nationalPrefixIsMandatoryWhenFormatting","get_template_for_phone_number_format_pattern","number_pattern","dummy_phone_number_matching_format_pattern","match","number_format","get_format_format","strict_pattern","national_number_dummy_digits","digits","split","digit","search","nationalPrefixFormattingRule","usesNationalPrefix","index","i","string","dangling_braces","push","pop","start","cleared_string","cut_before_index","cut_before","retained_template","opening_braces","closing_braces","symbol","count","character","times","result"],"mappings":"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","file":"AsYouType.js","sourcesContent":["// This is an enhanced port of Google Android `libphonenumber`'s\r\n// `asyoutypeformatter.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport\r\n{\r\n\tmatches_entirely,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\textractCountryCallingCode\r\n}\r\nfrom './common'\r\n\r\nimport\r\n{\r\n\textract_formatted_phone_number,\r\n\tfind_country_code,\r\n\tstrip_national_prefix_and_carrier_code\r\n}\r\nfrom './parse'\r\n\r\nimport\r\n{\r\n\tFIRST_GROUP_PATTERN,\r\n\tformat_national_number_using_format,\r\n\tlocal_to_international_style\r\n}\r\nfrom './format'\r\n\r\nimport\r\n{\r\n\tcheck_number_length_for_type\r\n}\r\nfrom './getNumberType'\r\n\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\nconst DUMMY_DIGIT_MATCHER = new RegExp(DUMMY_DIGIT, 'g')\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// The digits that have not been entered yet will be represented by a \\u2008,\r\n// the punctuation space.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\nconst DIGIT_PLACEHOLDER_MATCHER_GLOBAL = new RegExp(DIGIT_PLACEHOLDER, 'g')\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CHARACTER_CLASS_PATTERN = /\\[([^\\[\\]])*\\]/g\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst STANDALONE_DIGIT_PATTERN = /\\d(?=[^,}][^,}])/g\r\n\r\n// A pattern that is used to determine if a `format` is eligible\r\n// to be used by the \"as you type formatter\".\r\n// It is eligible when the `format` contains groups of the dollar sign\r\n// followed by a single digit, separated by valid phone number punctuation.\r\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\r\n// getting into the output of the \"as you type formatter\".\r\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp\r\n(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst VALID_INCOMPLETE_PHONE_NUMBER_PATTERN = new RegExp('^' + VALID_INCOMPLETE_PHONE_NUMBER + '$', 'i')\r\n\r\nexport default class AsYouType\r\n{\r\n\t// Not setting `options` to a constructor argument\r\n\t// not to break backwards compatibility\r\n\t// for older versions of the library.\r\n\toptions = {}\r\n\r\n\t/**\r\n\t * @param {string} [country_code] - The default country used for parsing non-international phone numbers.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(country_code, metadata)\r\n\t{\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\r\n\t\tif (country_code && this.metadata.hasCountry(country_code))\r\n\t\t{\r\n\t\t\tthis.default_country = country_code\r\n\t\t}\r\n\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\tinput(text)\r\n\t{\r\n\t\t// Parse input\r\n\r\n\t\tlet extracted_number = extract_formatted_phone_number(text) || ''\r\n\r\n\t\t// Special case for a lone '+' sign\r\n\t\t// since it's not considered a possible phone number.\r\n\t\tif (!extracted_number)\r\n\t\t{\r\n\t\t\tif (text && text.indexOf('+') >= 0)\r\n\t\t\t{\r\n\t\t\t\textracted_number = '+'\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate possible first part of a phone number\r\n\t\tif (!VALID_INCOMPLETE_PHONE_NUMBER_PATTERN.test(extracted_number))\r\n\t\t{\r\n\t\t\treturn this.current_output\r\n\t\t}\r\n\r\n\t\treturn this.process_input(parseIncompletePhoneNumber(extracted_number))\r\n\t}\r\n\r\n\tprocess_input(input)\r\n\t{\r\n\t\t// If an out of position '+' sign detected\r\n\t\t// (or a second '+' sign),\r\n\t\t// then just drop it from the input.\r\n\t\tif (input[0] === '+')\r\n\t\t{\r\n\t\t\tif (!this.parsed_input)\r\n\t\t\t{\r\n\t\t\t\tthis.parsed_input += '+'\r\n\r\n\t\t\t\t// If a default country was set\r\n\t\t\t\t// then reset it because an explicitly international\r\n\t\t\t\t// phone number is being entered\r\n\t\t\t\tthis.reset_countriness()\r\n\t\t\t}\r\n\r\n\t\t\tinput = input.slice(1)\r\n\t\t}\r\n\r\n\t\t// Raw phone number\r\n\t\tthis.parsed_input += input\r\n\r\n\t\t// // Reset phone number validation state\r\n\t\t// this.valid = false\r\n\r\n\t\t// Add digits to the national number\r\n\t\tthis.national_number += input\r\n\r\n\t\t// TODO: Deprecated: rename `this.national_number`\r\n\t\t// to `this.nationalNumber` and remove `.getNationalNumber()`.\r\n\r\n\t\t// Try to format the parsed input\r\n\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\tif (!this.countryCallingCode)\r\n\t\t\t{\r\n\t\t\t\t// No need to format anything\r\n\t\t\t\t// if there's no national phone number.\r\n\t\t\t\t// (e.g. just the country calling code)\r\n\t\t\t\tif (!this.national_number)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsed_input\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// If one looks at country phone codes\r\n\t\t\t\t// then he can notice that no one country phone code\r\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\r\n\t\t\t\t// So if a valid country code is extracted so far\r\n\t\t\t\t// then it means that this is the country code.\r\n\r\n\t\t\t\t// If no country phone code could be extracted so far,\r\n\t\t\t\t// then just return the raw phone number,\r\n\t\t\t\t// because it has no way of knowing\r\n\t\t\t\t// how to format the phone number so far.\r\n\t\t\t\tif (!this.extract_country_calling_code())\r\n\t\t\t\t{\r\n\t\t\t\t\t// Return raw phone number\r\n\t\t\t\t\treturn this.parsed_input\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Initialize country-specific data\r\n\t\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t\t\tthis.reset_format()\r\n\t\t\t\tthis.determine_the_country()\r\n\t\t\t}\r\n\t\t\t// `this.country` could be `undefined`,\r\n\t\t\t// for instance, when there is ambiguity\r\n\t\t\t// in a form of several different countries\r\n\t\t\t// each corresponding to the same country phone code\r\n\t\t\t// (e.g. NANPA: USA, Canada, etc),\r\n\t\t\t// and there's not enough digits entered\r\n\t\t\t// to reliably determine the country\r\n\t\t\t// the phone number belongs to.\r\n\t\t\t// Therefore, in cases of such ambiguity,\r\n\t\t\t// each time something is input,\r\n\t\t\t// try to determine the country\r\n\t\t\t// (if it's not determined yet).\r\n\t\t\telse if (!this.country)\r\n\t\t\t{\r\n\t\t\t\tthis.determine_the_country()\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Some national prefixes are substrings of other national prefixes\r\n\t\t\t// (for the same country), therefore try to extract national prefix each time\r\n\t\t\t// because a longer national prefix might be available at some point in time.\r\n\r\n\t\t\tconst previous_national_prefix = this.national_prefix\r\n\t\t\tthis.national_number = this.national_prefix + this.national_number\r\n\r\n\t\t\t// Possibly extract a national prefix\r\n\t\t\tthis.extract_national_prefix()\r\n\r\n\t\t\tif (this.national_prefix !== previous_national_prefix)\r\n\t\t\t{\r\n\t\t\t\t// National number has changed\r\n\t\t\t\t// (due to another national prefix been extracted)\r\n\t\t\t\t// therefore national number has changed\r\n\t\t\t\t// therefore reset all previous formatting data.\r\n\t\t\t\t// (and leading digits matching state)\r\n\t\t\t\tthis.matching_formats = this.available_formats\r\n\t\t\t\tthis.reset_format()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (!this.should_format())\r\n\t\t{\r\n\t\t\treturn this.format_as_non_formatted_number()\r\n\t\t}\r\n\r\n\t\t// Check the available phone number formats\r\n\t\t// based on the currently available leading digits.\r\n\t\tthis.match_formats_by_leading_digits()\r\n\r\n\t\t// Format the phone number (given the next digits)\r\n\t\tconst formatted_national_phone_number = this.format_national_phone_number(input)\r\n\r\n\t\t// If the phone number could be formatted,\r\n\t\t// then return it, possibly prepending with country phone code\r\n\t\t// (for international phone numbers only)\r\n\t\tif (formatted_national_phone_number)\r\n\t\t{\r\n\t\t\treturn this.full_phone_number(formatted_national_phone_number)\r\n\t\t}\r\n\r\n\t\t// If the phone number couldn't be formatted,\r\n\t\t// then just fall back to the raw phone number.\r\n\t\treturn this.parsed_input\r\n\t}\r\n\r\n\tformat_as_non_formatted_number()\r\n\t{\r\n\t\tif (this.is_international() && this.countryCallingCode)\r\n\t\t{\r\n\t\t\tif (this.national_number)\r\n\t\t\t{\r\n\t\t\t\t// For convenience, the public `.template` property\r\n\t\t\t\t// contains the whole international number\r\n\t\t\t\t// if the phone number being input is international:\r\n\t\t\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t\t\t// a spacebar and then the template for the national number digits.\r\n\t\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + repeat(DIGIT_PLACEHOLDER, this.national_number.length)\r\n\r\n\t\t\t\treturn `+${this.countryCallingCode} ${this.national_number}`\r\n\t\t\t}\r\n\r\n\t\t\treturn `+${this.countryCallingCode}`\r\n\t\t}\r\n\r\n\t\treturn this.parsed_input\r\n\t}\r\n\r\n\tformat_national_phone_number(next_digits)\r\n\t{\r\n\t\t// Format the next phone number digits\r\n\t\t// using the previously chosen phone number format.\r\n\t\t//\r\n\t\t// This is done here because if `attempt_to_format_complete_phone_number`\r\n\t\t// was placed before this call then the `template`\r\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\r\n\t\t//\r\n\t\tlet national_number_formatted_with_previous_format\r\n\t\tif (this.chosen_format)\r\n\t\t{\r\n\t\t\tnational_number_formatted_with_previous_format = this.format_next_national_number_digits(next_digits)\r\n\t\t}\r\n\r\n\t\t// See if the input digits can be formatted properly already. If not,\r\n\t\t// use the results from format_next_national_number_digits(), which does formatting\r\n\t\t// based on the formatting pattern chosen.\r\n\r\n\t\tconst formatted_number = this.attempt_to_format_complete_phone_number()\r\n\r\n\t\t// Just because a phone number doesn't have a suitable format\r\n\t\t// that doesn't mean that the phone is invalid\r\n\t\t// because phone number formats only format phone numbers,\r\n\t\t// they don't validate them and some (rare) phone numbers\r\n\t\t// are meant to stay non-formatted.\r\n\t\tif (formatted_number)\r\n\t\t{\r\n\t\t\t// if (this.country)\r\n\t\t\t// {\r\n\t\t\t// \tthis.valid = true\r\n\t\t\t// }\r\n\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\r\n\t\t// For some phone number formats national prefix\r\n\r\n\t\t// If the previously chosen phone number format\r\n\t\t// didn't match the next (current) digit being input\r\n\t\t// (leading digits pattern didn't match).\r\n\t\tif (this.choose_another_format())\r\n\t\t{\r\n\t\t\t// And a more appropriate phone number format\r\n\t\t\t// has been chosen for these `leading digits`,\r\n\t\t\t// then format the national phone number (so far)\r\n\t\t\t// using the newly selected phone number pattern.\r\n\r\n\t\t\t// Will return `undefined` if it couldn't format\r\n\t\t\t// the supplied national number\r\n\t\t\t// using the selected phone number pattern.\r\n\r\n\t\t\treturn this.reformat_national_number()\r\n\t\t}\r\n\r\n\t\t// If could format the next (current) digit\r\n\t\t// using the previously chosen phone number format\r\n\t\t// then return the formatted number so far.\r\n\r\n\t\t// If no new phone number format could be chosen,\r\n\t\t// and couldn't format the supplied national number\r\n\t\t// using the selected phone number pattern,\r\n\t\t// then it will return `undefined`.\r\n\r\n\t\treturn national_number_formatted_with_previous_format\r\n\t}\r\n\r\n\treset()\r\n\t{\r\n\t\t// Input stripped of non-phone-number characters.\r\n\t\t// Can only contain a possible leading '+' sign and digits.\r\n\t\tthis.parsed_input = ''\r\n\r\n\t\tthis.current_output = ''\r\n\r\n\t\t// This contains the national prefix that has been extracted. It contains only\r\n\t\t// digits without formatting.\r\n\t\tthis.national_prefix = ''\r\n\r\n\t\tthis.national_number = ''\r\n\r\n\t\tthis.reset_countriness()\r\n\r\n\t\tthis.reset_format()\r\n\r\n\t\t// this.valid = false\r\n\r\n\t\treturn this\r\n\t}\r\n\r\n\treset_country()\r\n\t{\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\tthis.country = undefined\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.country = this.default_country\r\n\t\t}\r\n\t}\r\n\r\n\treset_countriness()\r\n\t{\r\n\t\tthis.reset_country()\r\n\r\n\t\tif (this.default_country && !this.is_international())\r\n\t\t{\r\n\t\t\tthis.metadata.country(this.default_country)\r\n\t\t\tthis.countryCallingCode = this.metadata.countryCallingCode()\r\n\r\n\t\t\tthis.initialize_phone_number_formats_for_this_country_calling_code()\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.metadata.country(undefined)\r\n\t\t\tthis.countryCallingCode = undefined\r\n\r\n\t\t\tthis.available_formats = []\r\n\t\t\tthis.matching_formats = this.available_formats\r\n\t\t}\r\n\t}\r\n\r\n\treset_format()\r\n\t{\r\n\t\tthis.chosen_format = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.partially_populated_template = undefined\r\n\t\tthis.last_match_position = -1\r\n\t}\r\n\r\n\t// Format each digit of national phone number (so far)\r\n\t// using the newly selected phone number pattern.\r\n\treformat_national_number()\r\n\t{\r\n\t\t// Format each digit of national phone number (so far)\r\n\t\t// using the selected phone number pattern.\r\n\t\treturn this.format_next_national_number_digits(this.national_number)\r\n\t}\r\n\r\n\tinitialize_phone_number_formats_for_this_country_calling_code()\r\n\t{\r\n\t\t// Get all \"eligible\" phone number formats for this country\r\n\t\tthis.available_formats = this.metadata.formats().filter((format) =>\r\n\t\t{\r\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\r\n\t\t})\r\n\r\n\t\tthis.matching_formats = this.available_formats\r\n\t}\r\n\r\n\tmatch_formats_by_leading_digits()\r\n\t{\r\n\t\tconst leading_digits = this.national_number\r\n\r\n\t\t// \"leading digits\" pattern list starts with\r\n\t\t// one of a maximum length of 3 digits,\r\n\t\t// and then with each additional digit\r\n\t\t// a more precise \"leading digits\" pattern is specified.\r\n\r\n\t\tlet index_of_leading_digits_pattern = leading_digits.length - MIN_LEADING_DIGITS_LENGTH\r\n\r\n\t\tif (index_of_leading_digits_pattern < 0)\r\n\t\t{\r\n\t\t\tindex_of_leading_digits_pattern = 0\r\n\t\t}\r\n\r\n\t\tthis.matching_formats = this.matching_formats.filter((format) =>\r\n\t\t{\r\n\t\t\tconst leading_digits_pattern_count = format.leadingDigitsPatterns().length\r\n\r\n\t\t\t// Keep everything that isn't restricted by leading digits.\r\n\t\t\tif (leading_digits_pattern_count === 0)\r\n\t\t\t{\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\r\n\t\t\tconst leading_digits_pattern_index = Math.min(index_of_leading_digits_pattern, leading_digits_pattern_count - 1)\r\n\t\t\tconst leading_digits_pattern = format.leadingDigitsPatterns()[leading_digits_pattern_index]\r\n\r\n\t\t\t// Brackets are required for `^` to be applied to\r\n\t\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\t\treturn new RegExp(`^(${leading_digits_pattern})`).test(leading_digits)\r\n\t\t})\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosen_format && this.matching_formats.indexOf(this.chosen_format) === -1)\r\n\t\t{\r\n\t\t\tthis.reset_format()\r\n\t\t}\r\n\t}\r\n\r\n\tshould_format()\r\n\t{\r\n\t\t// Start matching any formats at all when the national number\r\n\t\t// entered so far is at least 3 digits long,\r\n\t\t// otherwise format matching would give false negatives\r\n\t\t// like when the digits entered so far are `2`\r\n\t\t// and the leading digits pattern is `21` –\r\n\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t//\r\n\t\t// Google could have provided leading digits patterns starting\r\n\t\t// with a single digit but they chose not to (for whatever reasons).\r\n\t\t//\r\n\t\treturn this.national_number >= MIN_LEADING_DIGITS_LENGTH\r\n\t}\r\n\r\n\t// Check to see if there is an exact pattern match for these digits. If so, we\r\n\t// should use this instead of any other formatting template whose\r\n\t// `leadingDigitsPattern` also matches the input.\r\n\tattempt_to_format_complete_phone_number()\r\n\t{\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\r\n\t\t\tif (!matcher.test(this.national_number))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.is_format_applicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\t// To leave the formatter in a consistent state\r\n\t\t\tthis.reset_format()\r\n\t\t\tthis.chosen_format = format\r\n\r\n\t\t\tconst formatted_number = format_national_number_using_format\r\n\t\t\t(\r\n\t\t\t\tthis.national_number,\r\n\t\t\t\tformat,\r\n\t\t\t\tthis.is_international(),\r\n\t\t\t\tthis.national_prefix.length > 0,\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\r\n\t\t\t// Set `this.template` and `this.partially_populated_template`.\r\n\t\t\t//\r\n\t\t\t// `else` case doesn't ever happen\r\n\t\t\t// with the current metadata,\r\n\t\t\t// but just in case.\r\n\t\t\t//\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (this.create_formatting_template(format))\r\n\t\t\t{\r\n\t\t\t\t// Populate `this.partially_populated_template`\r\n\t\t\t\tthis.reformat_national_number()\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// Prepend `+CountryCode` in case of an international phone number\r\n\t\t\t\tconst full_number = this.full_phone_number(formatted_number)\r\n\t\t\t\tthis.template = full_number.replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\r\n\t\t\t\tthis.partially_populated_template = full_number\r\n\t\t\t}\r\n\r\n\t\t\treturn formatted_number\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode` in case of an international phone number\r\n\tfull_phone_number(formatted_national_number)\r\n\t{\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\treturn `+${this.countryCallingCode} ${formatted_national_number}`\r\n\t\t}\r\n\r\n\t\treturn formatted_national_number\r\n\t}\r\n\r\n\t// Extracts the country calling code from the beginning\r\n\t// of the entered `national_number` (so far),\r\n\t// and places the remaining input into the `national_number`.\r\n\textract_country_calling_code()\r\n\t{\r\n\t\tconst { countryCallingCode, number } = extractCountryCallingCode(this.parsed_input, this.default_country, this.metadata)\r\n\r\n\t\tif (!countryCallingCode)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\r\n\t\t// Sometimes people erroneously write national prefix\r\n\t\t// as part of an international number, e.g. +44 (0) ....\r\n\t\t// This violates the standards for international phone numbers,\r\n\t\t// so \"As You Type\" formatter assumes no national prefix\r\n\t\t// when parsing a phone number starting from `+`.\r\n\t\t// Even if it did attempt to filter-out that national prefix\r\n\t\t// it would look weird for a user trying to enter a digit\r\n\t\t// because from user's perspective the keyboard \"wouldn't be working\".\r\n\t\tthis.national_number = number\r\n\r\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t\treturn this.metadata.selectedCountry() !== undefined\r\n\t}\r\n\r\n\textract_national_prefix()\r\n\t{\r\n\t\tthis.national_prefix = ''\r\n\r\n\t\tif (!this.metadata.selectedCountry())\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Only strip national prefixes for non-international phone numbers\r\n\t\t// because national prefixes can't be present in international phone numbers.\r\n\t\t// Otherwise, while forgiving, it would parse a NANPA number `+1 1877 215 5230`\r\n\t\t// first to `1877 215 5230` and then, stripping the leading `1`, to `877 215 5230`,\r\n\t\t// and then it would assume that's a valid number which it isn't.\r\n\t\t// So no forgiveness for grandmas here.\r\n\t\t// The issue asking for this fix:\r\n\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/159\r\n\t\tconst { number: potential_national_number } = strip_national_prefix_and_carrier_code(this.national_number, this.metadata)\r\n\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tif (!this.metadata.possibleLengths() ||\r\n\t\t\tthis.is_possible_number(this.national_number) &&\r\n\t\t\t!this.is_possible_number(potential_national_number))\r\n\t\t{\r\n\t\t\t// Verify the parsed national (significant) number for this country\r\n\t\t\t//\r\n\t\t\t// If the original number (before stripping national prefix) was viable,\r\n\t\t\t// and the resultant number is not, then prefer the original phone number.\r\n\t\t\t// This is because for some countries (e.g. Russia) the same digit could be both\r\n\t\t\t// a national prefix and a leading digit of a valid national phone number,\r\n\t\t\t// like `8` is the national prefix for Russia and both\r\n\t\t\t// `8 800 555 35 35` and `800 555 35 35` are valid numbers.\r\n\t\t\tif (matches_entirely(this.national_number, this.metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matches_entirely(potential_national_number, this.metadata.nationalNumberPattern()))\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.national_prefix = this.national_number.slice(0, this.national_number.length - potential_national_number.length)\r\n\t\tthis.national_number = potential_national_number\r\n\r\n\t\treturn this.national_prefix\r\n\t}\r\n\r\n\tis_possible_number(number)\r\n\t{\r\n\t\tconst validation_result = check_number_length_for_type(number, undefined, this.metadata)\r\n\t\tswitch (validation_result)\r\n\t\t{\r\n\t\t\tcase 'IS_POSSIBLE':\r\n\t\t\t\treturn true\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t// \treturn !this.is_international()\r\n\t\t\tdefault:\r\n\t\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\tchoose_another_format()\r\n\t{\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matching_formats)\r\n\t\t{\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still possible, then stick to it.\r\n\t\t\tif (this.chosen_format === format)\r\n\t\t\t{\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\t// If this `format` is suitable for \"as you type\",\r\n\t\t\t// then extract the template from this format\r\n\t\t\t// and use it to format the phone number being input.\r\n\r\n\t\t\tif (!this.is_format_applicable(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tif (!this.create_formatting_template(format))\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\r\n\t\t\tthis.chosen_format = format\r\n\r\n\t\t\t// With a new formatting template, the matched position\r\n\t\t\t// using the old template needs to be reset.\r\n\t\t\tthis.last_match_position = -1\r\n\r\n\t\t\treturn true\r\n\t\t}\r\n\r\n\t\t// No format matches the phone number,\r\n\t\t// therefore set `country` to `undefined`\r\n\t\t// (or to the default country).\r\n\t\tthis.reset_country()\r\n\r\n\t\t// No format matches the national phone number entered\r\n\t\tthis.reset_format()\r\n\t}\r\n\r\n\tis_format_applicable(format)\r\n\t{\r\n\t\t// If national prefix is mandatory for this phone number format\r\n\t\t// and the user didn't input the national prefix,\r\n\t\t// then this phone number format isn't suitable.\r\n\t\tif (!this.is_international() && !this.national_prefix && format.nationalPrefixIsMandatoryWhenFormatting())\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn true\r\n\t}\r\n\r\n\tcreate_formatting_template(format)\r\n\t{\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (format.pattern().indexOf('|') >= 0)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get formatting template for this phone number format\r\n\t\tconst template = this.get_template_for_phone_number_format_pattern(format)\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (!template)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// This one is for national number only\r\n\t\tthis.partially_populated_template = template\r\n\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\tthis.template = DIGIT_PLACEHOLDER + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template\r\n\t\t}\r\n\t\t// For local numbers, replace national prefix\r\n\t\t// with a digit placeholder.\r\n\t\telse\r\n\t\t{\r\n\t\t\tthis.template = template.replace(/\\d/g, DIGIT_PLACEHOLDER)\r\n\t\t}\r\n\r\n\t\t// This one is for the full phone number\r\n\t\treturn this.template\r\n\t}\r\n\r\n\t// Generates formatting template for a phone number format\r\n\tget_template_for_phone_number_format_pattern(format)\r\n\t{\r\n\t\t// A very smart trick by the guys at Google\r\n\t\tconst number_pattern = format.pattern()\r\n\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t.replace(CHARACTER_CLASS_PATTERN, '\\\\d')\r\n\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t.replace(STANDALONE_DIGIT_PATTERN, '\\\\d')\r\n\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\tlet dummy_phone_number_matching_format_pattern = LONGEST_DUMMY_PHONE_NUMBER.match(number_pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (this.national_number.length > dummy_phone_number_matching_format_pattern.length)\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Prepare the phone number format\r\n\t\tconst number_format = this.get_format_format(format)\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strict_pattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strict_pattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.national_number : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// number_pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// number_format : `$1 $2 $3`\r\n\t\t// dummy_phone_number_matching_format_pattern : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `number_pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.national_number` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then `this.national_number` is used\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\r\n\t\tconst strict_pattern = new RegExp('^' + number_pattern + '$')\r\n\t\tconst national_number_dummy_digits = this.national_number.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.national_number` has already sufficient length\r\n\t\t// to satisfy the `number_pattern` completely then use it\r\n\t\t// instead of `dummy_phone_number_matching_format_pattern`.\r\n\t\tif (strict_pattern.test(national_number_dummy_digits))\r\n\t\t{\r\n\t\t\tdummy_phone_number_matching_format_pattern = national_number_dummy_digits\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format\r\n\t\treturn dummy_phone_number_matching_format_pattern\r\n\t\t\t// Format the dummy phone number according to the format\r\n\t\t\t.replace(new RegExp(number_pattern), number_format)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER\r\n\t\t\t.replace(DUMMY_DIGIT_MATCHER, DIGIT_PLACEHOLDER)\r\n\t}\r\n\r\n\tformat_next_national_number_digits(digits)\r\n\t{\r\n\t\t// Using `.split('')` to iterate through a string here\r\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t\t// `.split('')` is generally not safe for Unicode,\r\n\t\t// but in this particular case for `digits` it is safe.\r\n\t\t// for (const digit of digits)\r\n\t\tfor (const digit of digits.split(''))\r\n\t\t{\r\n\t\t\t// If there is room for more digits in current `template`,\r\n\t\t\t// then set the next digit in the `template`,\r\n\t\t\t// and return the formatted digits so far.\r\n\r\n\t\t\t// If more digits are entered than the current format could handle\r\n\t\t\tif (this.partially_populated_template.slice(this.last_match_position + 1).search(DIGIT_PLACEHOLDER_MATCHER) === -1)\r\n\t\t\t{\r\n\t\t\t\t// Reset the current format,\r\n\t\t\t\t// so that the new format will be chosen\r\n\t\t\t\t// in a subsequent `this.choose_another_format()` call\r\n\t\t\t\t// later in code.\r\n\t\t\t\tthis.chosen_format = undefined\r\n\t\t\t\tthis.template = undefined\r\n\t\t\t\tthis.partially_populated_template = undefined\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tthis.last_match_position = this.partially_populated_template.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\t\tthis.partially_populated_template = this.partially_populated_template.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t\t}\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cut_stripping_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return close_dangling_braces(this.partially_populated_template, this.last_match_position + 1)\r\n\t\t// \t.replace(DIGIT_PLACEHOLDER_MATCHER_GLOBAL, ' ')\r\n\t}\r\n\r\n\tis_international()\r\n\t{\r\n\t\treturn this.parsed_input && this.parsed_input[0] === '+'\r\n\t}\r\n\r\n\tget_format_format(format)\r\n\t{\r\n\t\tif (this.is_international())\r\n\t\t{\r\n\t\t\treturn local_to_international_style(format.internationalFormat())\r\n\t\t}\r\n\r\n\t\t// If national prefix formatting rule is set\r\n\t\t// for this phone number format\r\n\t\tif (format.nationalPrefixFormattingRule())\r\n\t\t{\r\n\t\t\t// If the user did input the national prefix\r\n\t\t\t// (or if the national prefix formatting rule does not require national prefix)\r\n\t\t\t// then maybe make it part of the phone number template\r\n\t\t\tif (this.national_prefix || !format.usesNationalPrefix())\r\n\t\t\t{\r\n\t\t\t\t// Make the national prefix part of the phone number template\r\n\t\t\t\treturn format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule())\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn format.format()\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermine_the_country()\r\n\t{\r\n\t\tthis.country = find_country_code(this.countryCallingCode, this.national_number, this.metadata)\r\n\t}\r\n\r\n\tgetNationalNumber()\r\n\t{\r\n\t\treturn this.national_number\r\n\t}\r\n\r\n\tgetTemplate()\r\n\t{\r\n\t\tif (!this.template) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tlet index = -1\r\n\r\n\t\tlet i = 0\r\n\t\twhile (i < this.parsed_input.length)\r\n\t\t{\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\r\n\t\treturn cut_stripping_dangling_braces(this.template, index + 1)\r\n\t}\r\n}\r\n\r\nexport function strip_dangling_braces(string)\r\n{\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length)\r\n\t{\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces)\r\n\t{\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\r\n\treturn cleared_string\r\n}\r\n\r\nexport function cut_stripping_dangling_braces(string, cut_before_index)\r\n{\r\n\tif (string[cut_before_index] === ')') {\r\n\t\tcut_before_index++\r\n\t}\r\n\treturn strip_dangling_braces(string.slice(0, cut_before_index))\r\n}\r\n\r\nexport function close_dangling_braces(template, cut_before)\r\n{\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\r\n\tconst opening_braces = count_occurences('(', retained_template)\r\n\tconst closing_braces = count_occurences(')', retained_template)\r\n\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length)\r\n\t{\r\n\t\tif (template[cut_before] === ')')\r\n\t\t{\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function count_occurences(symbol, string)\r\n{\r\n\tlet count = 0\r\n\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split(''))\r\n\t{\r\n\t\tif (character === symbol)\r\n\t\t{\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times)\r\n{\r\n\tif (times < 1)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tlet result = ''\r\n\r\n\twhile (times > 1)\r\n\t{\r\n\t\tif (times & 1)\r\n\t\t{\r\n\t\t\tresult += string\r\n\t\t}\r\n\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\r\n\treturn result + string\r\n}"]}