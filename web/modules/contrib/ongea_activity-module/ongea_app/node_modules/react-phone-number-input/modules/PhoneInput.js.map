{"version":3,"sources":["../source/PhoneInput.js"],"names":["PureComponent","Component","PhoneNumberInput","props","value","country","countries","labels","international","metadata","parsed_number","pre_selected_country","state","country_select_options","generate_country_select_options","parsed_input","generateParsedInput","name","disabled","autoComplete","countrySelectTabIndex","showCountrySelect","style","className","inputClassName","getInputClassName","countrySelectProperties","error","indicateInvalid","CountrySelectComponent","countrySelectComponent","InputComponent","inputComponent","ext","countryOptions","_","flags","flagComponent","flagsPath","internationalIcon","displayInitialValueAsLocalNumber","onCountryChange","locale","phoneNumberInputProps","hidePhoneInputField","_countrySelectProps","key","hasOwnProperty","storeCountrySelectInstance","undefined","focus","storePhoneNumberInputInstance","onChange","onBlur","onPhoneNumberKeyDown","invalid","cloneElement","type","hasChangedCountry","old_default_country","old_value","new_default_country","new_value","new_state","propTypes","string","func","isRequired","onKeyDown","bool","arrayOf","objectOf","number","object","node","defaultProps","new_country","old_parsed_input","old_country","new_parsed_input","setState","event","_event","target","stopPropagation","preventDefault","hide","number_input","country_select","CountrySelectOptionIcon","createCountrySelectOptionIconComponent","transformCountryOptions","map","label","icon","FlagComponent","InternationalIcon","options","transform","optionsOnTop","optionsOnBottom","appendTo","element","push","divider","index","indexOf","filter","option","splice","concat"],"mappings":"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","file":"PhoneInput.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\n\r\n// import InputSmart from './InputSmart'\r\nimport InputBasic from './InputBasic'\r\n\r\nimport FlagComponent from './Flag'\r\n\r\nimport\r\n{\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n}\r\nfrom './PropTypes'\r\n\r\nimport\r\n{\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tmigrateParsedInputForNewCountry,\r\n\tgetCountryForParsedInput,\r\n\te164\r\n}\r\nfrom './input-control'\r\n\r\nimport { getCountryCodes } from './countries'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\n@reactLifecyclesCompat\r\nexport default class PhoneNumberInput extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// Phone number in E.164 format.\r\n\t\t// E.g. \"+12223333333\" for USA.\r\n\t\tvalue : PropTypes.string,\r\n\r\n\t\t// `onChange` handler is called each time\r\n\t\t// the phone number `<input/>` is edited.\r\n\t\tonChange : PropTypes.func.isRequired,\r\n\r\n\t\t// `onBlur` is usually passed by `redux-form`.\r\n\t\tonBlur : PropTypes.func,\r\n\r\n\t\t// `onKeyDown` handler (e.g. to handle Enter key press).\r\n\t\tonKeyDown : PropTypes.func,\r\n\r\n\t\t// Some people requested an `onCountryChange` event listener.\r\n\t\t// No valid reason was given other than compliance with some legacy code\r\n\t\t// which stored both phone number and country in a database.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t\tonCountryChange : PropTypes.func,\r\n\r\n\t\t// Disables both the phone number `<input/>`\r\n\t\t// and the country `<select/>`.\r\n\t\t// (is `false` by default)\r\n\t\tdisabled : PropTypes.bool.isRequired,\r\n\r\n\t\t// Web browser's \"autocomplete\" feature\r\n\t\t// remembers the phone number being input\r\n\t\t// and can also autofill the `<input/>`\r\n\t\t// with previously remembered phone numbers.\r\n\t\t//\r\n\t\t// Default value: \"tel\".\r\n\t\t//\r\n\t\t// https://developers.google.com/web/updates/2015/06/checkout-faster-with-autofill\r\n\t\t//\r\n\t\t// \"So when should you use autocomplete=\"off\"?\r\n\t\t//  One example is when you've implemented your own version\r\n\t\t//  of autocomplete for search. Another example is any form field\r\n\t\t//  where users will input and submit different kinds of information\r\n\t\t//  where it would not be useful to have the browser remember\r\n\t\t//  what was submitted previously\".\r\n\t\t//\r\n\t\tautoComplete : PropTypes.string.isRequired,\r\n\r\n\t\t// Should the initially passed phone number `value`\r\n\t\t// be converted to a national phone number for its country.\r\n\t\t// (is `false` by default)\r\n\t\tdisplayInitialValueAsLocalNumber : PropTypes.bool.isRequired,\r\n\r\n\t\t// The country to be selected by default.\r\n\t\t// Two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t// Only these countries will be available for selection.\r\n\t\t// Includes all countries by default.\r\n\t\tcountries : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t// Custom country `<select/>` option names.\r\n\t\t// E.g. `{ ZZ: 'Международный', RU: 'Россия', US: 'США', ... }`\r\n\t\tlabels : labelsPropType.isRequired,\r\n\r\n\t\t// Country flag icon components.\r\n\t\t// By default flag icons are inserted as `<img/>`s\r\n\t\t// with their `src` pointed to `flag-icon-css` github repo.\r\n\t\t// There might be cases (e.g. an offline application)\r\n\t\t// where having a large (3 megabyte) `<svg/>` flags\r\n\t\t// bundle is more appropriate.\r\n\t\t// `import flags from 'react-phone-number-input/flags'`.\r\n\t\tflags : PropTypes.objectOf(PropTypes.func),\r\n\r\n\t\t// Flag icon component.\r\n\t\tflagComponent : PropTypes.func.isRequired,\r\n\r\n\t\t// A base URL path for national flag SVG icons.\r\n\t\t// By default it uses the ones from `flag-icon-css` github repo.\r\n\t\tflagsPath : PropTypes.string.isRequired,\r\n\r\n\t\t// Whether to add the \"International\" option\r\n\t\t// to the list of countries.\r\n\t\tinternational : PropTypes.bool.isRequired,\r\n\r\n\t\t// Custom \"International\" country `<select/>` option icon.\r\n\t\tinternationalIcon : PropTypes.func.isRequired,\r\n\r\n\t\t// Whether to show country `<select/>`.\r\n\t\t// (is `true` by default)\r\n\t\tshowCountrySelect : PropTypes.bool.isRequired,\r\n\r\n\t\t// HTML `tabindex` attribute for the country `<select/>`.\r\n\t\tcountrySelectTabIndex : PropTypes.number,\r\n\r\n\t\t// Can be used to place some countries on top of the list.\r\n\t\t// E.g. `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`.\r\n\t\tcountryOptions : PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t\t// `<Phone/>` component CSS style object.\r\n\t\tstyle : PropTypes.object,\r\n\r\n\t\t// `<Phone/>` component CSS class.\r\n\t\tclassName : PropTypes.string,\r\n\r\n\t\t// `<input/>` CSS class.\r\n\t\t// Both for the phone number `<input/>` and\r\n\t\t// `react-responsive-ui` `<Select/>` autocomplete input.\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t// Returns phone number `<input/>` CSS class string.\r\n\t\t// Receives an object of shape `{ disabled : boolean?, invalid : boolean? }`.\r\n\t\tgetInputClassName : PropTypes.func,\r\n\r\n\t\t// Country `<select/>` component.\r\n\t\t//\r\n\t\t// Receives properties:\r\n\t\t//\r\n\t\t// * `name : string?` — HTML `name` attribute.\r\n\t\t// * `value : string?` — The currently selected country code.\r\n\t\t// * `onChange(value : string?)` — Updates the `value`.\r\n\t\t// * `options : object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value : string?, label : string, icon : React.Component }`.\r\n\t\t// * `disabled : boolean?` — HTML `disabled` attribute.\r\n\t\t// * `tabIndex : (number|string)?` — HTML `tabIndex` attribute.\r\n\t\t// * `className : string` — CSS class name.\r\n\t\t//\r\n\t\t// Optional properties (should be ignored unless needed):\r\n\t\t//\r\n\t\t// * `hidePhoneInputField(hide : boolean)` — Can be called to show/hide phone input field. Takes `hide : boolean` argument. E.g. `react-responsive-ui` `<Select/>` uses this to hide phone number input when country select is expanded.\r\n\t\t// * `focusPhoneInputField()` — Can be called to manually focus phone input field. E.g. `react-responsive-ui` `<Select/>` uses this to focus phone number input after country selection in a timeout (after the phone input field is no longer hidden).\r\n\t\t//\r\n\t\tcountrySelectComponent : PropTypes.func.isRequired,\r\n\r\n\t\t// Phone number `<input/>` component.\r\n\t\t//\r\n\t\t// Receives properties:\r\n\t\t//\r\n\t\t// * `value : string` — The parsed phone number. E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t// * `onChange(value : string)` — Updates the `value`.\r\n\t\t// * `country : string?` — The currently selected country. `undefined` means \"International\" (no country selected).\r\n\t\t// * `metadata : object` — `libphonenumber-js` metadata.\r\n\t\t// * All other properties should be passed through to the underlying `<input/>`.\r\n\t\t//\r\n\t\t// Must also implement `.focus()` method.\r\n\t\t//\r\n\t\tinputComponent : PropTypes.func.isRequired,\r\n\r\n\t\t// // Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t// // instead of `input-format`'s `<ReactInput/>`.\r\n\t\t// // Is `false` by default.\r\n\t\t// smartCaret : PropTypes.bool.isRequired,\r\n\r\n\t\t// Phone number extension element.\r\n\t\text : PropTypes.node,\r\n\r\n\t\t// An error message shown below the phone number `<input/>`.\r\n\t\terror : PropTypes.string,\r\n\r\n\t\t// The `error` is shown only when `indicateInvalid` is `true`.\r\n\t\t// (which is the default).\r\n\t\t// (depecated).\r\n\t\tindicateInvalid : PropTypes.bool,\r\n\r\n\t\t// Translation.\r\n\t\tlocale : PropTypes.objectOf(PropTypes.string),\r\n\r\n\t\t// Allows passing custom `libphonenumber-js` metadata\r\n\t\t// to reduce the overall bundle size for those compiling \"custom\" metadata.\r\n\t\tmetadata : metadataPropType.isRequired\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// Not disabled.\r\n\t\tdisabled: false,\r\n\r\n\t\t// Show `error` (if passed).\r\n\t\t// (depecated).\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t// Remember (and autofill) the value as a phone number.\r\n\t\tautoComplete: 'tel',\r\n\r\n\t\t// Flag icon component.\r\n\t\tflagComponent: FlagComponent,\r\n\r\n\t\t// By default use icons from `flag-icon-css` github repo.\r\n\t\tflagsPath: 'https://lipis.github.io/flag-icon-css/flags/4x3/',\r\n\r\n\t\t// // Default \"International\" country `<select/>` option icon (globe).\r\n\t\t// internationalIcon: InternationalIcon,\r\n\r\n\t\t// Phone number `<input/>` component.\r\n\t\tinputComponent: InputBasic,\r\n\r\n\t\t// Show country `<select/>`.\r\n\t\tshowCountrySelect: true,\r\n\r\n\t\t// Don't convert the initially passed phone number `value`\r\n\t\t// to a national phone number for its country.\r\n\t\t// The reason is that the newer generation grows up when\r\n\t\t// there are no stationary phones and therefore everyone inputs\r\n\t\t// phone numbers with a `+` in their smartphones\r\n\t\t// so phone numbers written in international form\r\n\t\t// are gradually being considered more natural than local ones.\r\n\t\tdisplayInitialValueAsLocalNumber: false,\r\n\r\n\t\t// // Set to `false` to use `inputComponent={InputBasic}`\r\n\t\t// // instead of `input-format`'s `<ReactInput/>`.\r\n\t\t// // Is `false` by default.\r\n\t\t// smartCaret : false,\r\n\r\n\t\t// Whether to add the \"International\" option\r\n\t\t// to the list of countries.\r\n\t\tinternational : true\r\n\t}\r\n\r\n\tconstructor(props)\r\n\t{\r\n\t\tsuper(props)\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst parsed_number = parsePhoneNumber(value, metadata)\r\n\r\n\t\tconst pre_selected_country = getPreSelectedCountry\r\n\t\t(\r\n\t\t\tparsed_number,\r\n\t\t\tcountry,\r\n\t\t\tcountries || getCountryCodes(labels),\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t)\r\n\r\n\t\tthis.state =\r\n\t\t{\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops : this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry : pre_selected_country,\r\n\r\n\t\t\t// Generate country `<select/>` options.\r\n\t\t\tcountry_select_options : generate_country_select_options(this.props),\r\n\r\n\t\t\t// `parsed_input` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value`is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `parsed_input` is `+78005553535`.\r\n\t\t\tparsed_input : generateParsedInput(value, parsed_number, this.props),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `parsed_input` needs updating:\r\n\t\t\t// If the `value` property changed externally\r\n\t\t\t// then it won't be equal to state `value`\r\n\t\t\t// in which case `parsed_input` and `country` get updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (new_country) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tonCountryChange,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tparsed_input : old_parsed_input,\r\n\t\t\tcountry      : old_country\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst new_parsed_input = migrateParsedInputForNewCountry\r\n\t\t(\r\n\t\t\told_parsed_input,\r\n\t\t\told_country,\r\n\t\t\tnew_country,\r\n\t\t\tmetadata,\r\n\t\t\tdisplayInitialValueAsLocalNumber\r\n\t\t)\r\n\r\n\t\tconst new_value = e164(new_parsed_input, new_country, metadata)\r\n\r\n\t\tif (onCountryChange) {\r\n\t\t\tonCountryChange(new_country)\r\n\t\t}\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tthis.focus()\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tcountry           : new_country,\r\n\t\t\thasChangedCountry : true,\r\n\t\t\tparsed_input      : new_parsed_input,\r\n\t\t\tvalue             : new_value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(new_value)\r\n\t\t})\r\n\t}\r\n\r\n\t// Phone number `<input/>` `onKeyDown` handler.\r\n\tonPhoneNumberKeyDown = (event) =>\r\n\t{\r\n\t\tconst { onKeyDown } = this.props\r\n\r\n\t\t// Actually \"Down arrow\" key is used for showing \"autocomplete\" (\"autofill\") options.\r\n\t\t// (e.g. previously entered phone numbers for `autoComplete=\"tel\"`)\r\n\t\t// so can't hijack \"Down arrow\" keypress here.\r\n\t\t// // Expand country `<select/>`` on \"Down arrow\" key press.\r\n\t\t// if (event.keyCode === 40) {\r\n\t\t// \tthis.country_select.toggle()\r\n\t\t// }\r\n\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}\r\n\r\n\t// `<input/>` `onChange` handler.\r\n\t// Updates `value` property accordingly.\r\n\t// (so that they are kept in sync).\r\n\t// `parsed_input` must be a parsed phone number\r\n\t// or an empty string.\r\n\t// E.g.: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\tonChange = (parsed_input) =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tonChange,\r\n\t\t\tonCountryChange,\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tmetadata\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tlet { country } = this.state\r\n\r\n\t\tif (parsed_input)\r\n\t\t{\r\n\t\t\t// If the phone number being input is an international one\r\n\t\t\t// then tries to derive the country from the phone number.\r\n\t\t\t// (regardless of whether there's any country currently selected)\r\n\t\t\tif (parsed_input[0] === '+')\r\n\t\t\t{\r\n\t\t\t\tconst old_country = country\r\n\t\t\t\tcountry = getCountryForParsedInput\r\n\t\t\t\t(\r\n\t\t\t\t\tparsed_input,\r\n\t\t\t\t\tcountry,\r\n\t\t\t\t\tcountries,\r\n\t\t\t\t\tinternational,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t)\r\n\r\n\t\t\t\tif (country !== old_country && onCountryChange) {\r\n\t\t\t\t\tonCountryChange(country)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If this `onChange()` event was triggered\r\n\t\t\t// as a result of selecting \"International\" country\r\n\t\t\t// then force-prepend a `+` sign if the phone number\r\n\t\t\t// `<input/>` value isn't in international format.\r\n\t\t\telse if (!country)\r\n\t\t\t{\r\n\t\t\t\tparsed_input = '+' + parsed_input\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate the new `value` property.\r\n\t\tconst value = e164(parsed_input, country, metadata)\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tparsed_input,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t},\r\n\t\t// Update the new `value` property.\r\n\t\t// Doing it after the `state` has been updated\r\n\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t() => onChange(value))\r\n\t}\r\n\r\n\t// This `onBlur` interceptor is a workaround for `redux-form`\r\n\t// so that it gets the up-to-date `value` in its `onBlur` handler.\r\n\t// Without this fix it just gets the actual (raw) input field textual value.\r\n\t// E.g. `+7 800 555 35 35` instead of `+78005553535`.\r\n\t//\r\n\t// A developer is not supposed to pass this `onBlur` property manually.\r\n\t// Instead, `redux-form` passes `onBlur` to this component automatically\r\n\t// and this component patches that `onBlur` handler (a hacky way but works).\r\n\t//\r\n\tonBlur = (event) =>\r\n\t{\r\n\t\tconst { onBlur } = this.props\r\n\t\tconst { value } = this.state\r\n\r\n\t\tif (!onBlur) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// `event` is React's `SyntheticEvent`.\r\n\t\t// Its `.value` is read-only therefore cloning it.\r\n\t\tconst _event =\r\n\t\t{\r\n\t\t\t...event,\r\n\t\t\ttarget:\r\n\t\t\t{\r\n\t\t\t\t...event.target,\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// For `redux-form` event detection.\r\n\t\t// https://github.com/erikras/redux-form/blob/v5/src/events/isEvent.js\r\n\t\t_event.stopPropagation = event.stopPropagation\r\n\t\t_event.preventDefault  = event.preventDefault\r\n\r\n\t\treturn onBlur(_event)\r\n\t}\r\n\r\n\t// When country `<select/>` is toggled.\r\n\thidePhoneInputField = (hide) =>\r\n\t{\r\n\t\tthis.setState({\r\n\t\t\thidePhoneInputField: hide\r\n\t\t})\r\n\t}\r\n\r\n\t// Can be called externally.\r\n\tfocus = () => this.number_input.focus()\r\n\r\n\tstoreCountrySelectInstance = _ => this.country_select = _\r\n\r\n\tstorePhoneNumberInputInstance = _ => this.number_input = _\r\n\r\n\tstatic getDerivedStateFromProps(props, state)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thasChangedCountry,\r\n\t\t\tvalue,\r\n\t\t\tprops:\r\n\t\t\t{\r\n\t\t\t\tcountry : old_default_country,\r\n\t\t\t\tvalue   : old_value\r\n\t\t\t}\r\n\t\t}\r\n\t\t= state\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmetadata,\r\n\t\t\tcountry : new_default_country,\r\n\t\t\tvalue   : new_value\r\n\t\t}\r\n\t\t= props\r\n\r\n\t\t// Emulate `prevProps` via `state.props`.\r\n\t\tconst new_state = { props }\r\n\r\n\t\t// If `countries` or `labels` or `international` changed\r\n\t\t// then re-generate country `<select/>` options.\r\n\t\tif (props.countries !== state.props.countries ||\r\n\t\t\tprops.labels !== state.props.labels ||\r\n\t\t\tprops.international !== state.props.international)\r\n\t\t{\r\n\t\t\tnew_state.country_select_options = generate_country_select_options(props)\r\n\t\t}\r\n\r\n\t\t// If the default country changed.\r\n\t\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t\t// then select it but only if the user didn't previously select\r\n\t\t// another country and no phone number has been entered so far.\r\n\t\t// Because if the user has already started inputting a phone number\r\n\t\t// then he's okay with no country being selected at all (\"International\")\r\n\t\t// and doesn't want to be disturbed, doesn't want his input to be screwed, etc.\r\n\t\tif (new_default_country !== old_default_country && !hasChangedCountry && !value && !new_value)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tcountry : new_default_country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// If a new `value` is set externally.\r\n\t\t// (e.g. as a result of an ajax API request\r\n\t\t//  to get user's phone after page loaded)\r\n\t\t// The first part — `new_value !== old_value` —\r\n\t\t// is basically `props.value !== prevProps.value`\r\n\t\t// so it means \"if value property was changed externally\".\r\n\t\t// The second part — `new_value !== value` —\r\n\t\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t\t// then the country flag would reset on each input.\r\n\t\telse if (new_value !== old_value && new_value !== value)\r\n\t\t{\r\n\t\t\tconst parsed_number = parsePhoneNumber(new_value, metadata)\r\n\r\n\t\t\treturn {\r\n\t\t\t\t...new_state,\r\n\t\t\t\tparsed_input : generateParsedInput(new_value, parsed_number, props),\r\n\t\t\t\tvalue : new_value,\r\n\t\t\t\tcountry : new_value ? parsed_number.country : country\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Maybe `new_state.country_select_options` changed.\r\n\t\t// In any case, update `prevProps`.\r\n\t\treturn new_state\r\n\t}\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\tautoComplete,\r\n\t\t\tcountrySelectTabIndex,\r\n\t\t\tshowCountrySelect,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\t\t\tinputClassName,\r\n\t\t\tgetInputClassName,\r\n\t\t\tcountrySelectProperties,\r\n\r\n\t\t\terror,\r\n\t\t\tindicateInvalid,\r\n\r\n\t\t\tcountrySelectComponent : CountrySelectComponent,\r\n\t\t\tinputComponent : InputComponent,\r\n\t\t\t// smartCaret,\r\n\t\t\text,\r\n\r\n\t\t\t// Extract `phoneNumberInputProps` via \"object rest spread\":\r\n\t\t\tcountries,\r\n\t\t\tcountryOptions,\r\n\t\t\tlabels,\r\n\t\t\tcountry : _,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagsPath,\r\n\t\t\tinternational,\r\n\t\t\tinternationalIcon,\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tonCountryChange,\r\n\t\t\tlocale,\r\n\t\t\tmetadata,\r\n\t\t\t...phoneNumberInputProps\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tcountry,\r\n\t\t\thidePhoneInputField,\r\n\t\t\tcountry_select_options,\r\n\t\t\tparsed_input\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\t// const InputComponent = inputComponent || (smartCaret ? InputSmart : InputBasic)\r\n\r\n\t\t// Extract `countrySelectProperties` from `this.props`\r\n\t\t// also removing them from `phoneNumberInputProps`.\r\n\t\tconst _countrySelectProps = {}\r\n\t\tif (countrySelectProperties)\r\n\t\t{\r\n\t\t\tfor (const key in countrySelectProperties)\r\n\t\t\t{\r\n\t\t\t\tif (this.props.hasOwnProperty(key))\r\n\t\t\t\t{\r\n\t\t\t\t\t_countrySelectProps[countrySelectProperties[key]] = this.props[key]\r\n\t\t\t\t\tdelete phoneNumberInputProps[key]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style }\r\n\t\t\t\tclassName={ classNames('react-phone-number-input',\r\n\t\t\t\t{\r\n\t\t\t\t\t'react-phone-number-input--invalid': error && indicateInvalid\r\n\t\t\t\t},\r\n\t\t\t\tclassName) }>\r\n\r\n\t\t\t\t{/* Country `<select/>` and phone number `<input/>` */}\r\n\t\t\t\t<div className=\"react-phone-number-input__row\">\r\n\r\n\t\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t\t{ showCountrySelect &&\r\n\t\t\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\t\t\t{..._countrySelectProps}\r\n\t\t\t\t\t\t\tref={ this.storeCountrySelectInstance }\r\n\t\t\t\t\t\t\tname={ name ? `${name}__country` : undefined }\r\n\t\t\t\t\t\t\tvalue={ country }\r\n\t\t\t\t\t\t\toptions={ country_select_options }\r\n\t\t\t\t\t\t\tonChange={ this.onCountryChange }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\ttabIndex={ countrySelectTabIndex }\r\n\t\t\t\t\t\t\thidePhoneInputField={ this.hidePhoneInputField }\r\n\t\t\t\t\t\t\tfocusPhoneInputField={ this.focus }\r\n\t\t\t\t\t\t\tclassName=\"react-phone-number-input__country\"/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t\t{ !hidePhoneInputField &&\r\n\t\t\t\t\t\t<InputComponent\r\n\t\t\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\t\t\tname={ name }\r\n\t\t\t\t\t\t\t{ ...phoneNumberInputProps }\r\n\t\t\t\t\t\t\tref={ this.storePhoneNumberInputInstance }\r\n\t\t\t\t\t\t\tmetadata={ metadata }\r\n\t\t\t\t\t\t\tcountry={ country }\r\n\t\t\t\t\t\t\tvalue={ parsed_input || '' }\r\n\t\t\t\t\t\t\tonChange={ this.onChange }\r\n\t\t\t\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\t\t\t\tonKeyDown={ this.onPhoneNumberKeyDown }\r\n\t\t\t\t\t\t\tdisabled={ disabled }\r\n\t\t\t\t\t\t\tautoComplete={ autoComplete }\r\n\t\t\t\t\t\t\tclassName={ classNames\r\n\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t'react-phone-number-input__phone',\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--invalid'  : error && indicateInvalid\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled, invalid: error && indicateInvalid })\r\n\t\t\t\t\t\t\t) }/>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* Phone extension `<input/>` */}\r\n\t\t\t\t\t{ ext && !hidePhoneInputField &&\r\n\t\t\t\t\t\t<label className=\"react-phone-number-input__ext\">\r\n\t\t\t\t\t\t\t{labels.ext}\r\n\t\t\t\t\t\t\t{React.cloneElement(ext,\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\ttype : ext.props.type === undefined ? 'number' : ext.props.type,\r\n\t\t\t\t\t\t\t\tclassName : classNames\r\n\t\t\t\t\t\t\t\t(\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__input',\r\n\t\t\t\t\t\t\t\t\t'react-phone-number-input__ext-input',\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\t'react-phone-number-input__input--disabled' : disabled,\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t\t\t\t\tgetInputClassName && getInputClassName({ disabled }),\r\n\t\t\t\t\t\t\t\t\text.props.className\r\n\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</label>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ error && indicateInvalid &&\r\n\t\t\t\t\t<div className=\"react-phone-number-input__error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// Generates country `<select/>` options.\r\nfunction generate_country_select_options(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tcountries,\r\n\t\tlabels,\r\n\t\tinternational,\r\n\t\tcountryOptions\r\n\t}\r\n\t= props\r\n\r\n\tconst CountrySelectOptionIcon = createCountrySelectOptionIconComponent(props)\r\n\r\n\treturn transformCountryOptions(getCountrySelectOptions\r\n\t(\r\n\t\tcountries || getCountryCodes(labels),\r\n\t\tlabels,\r\n\t\tinternational\r\n\t)\r\n\t.map(({ value, label }) =>\r\n\t({\r\n\t\tvalue,\r\n\t\tlabel,\r\n\t\ticon : CountrySelectOptionIcon\r\n\t})),\r\n\tcountryOptions)\r\n}\r\n\r\nfunction createCountrySelectOptionIconComponent(props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tflags,\r\n\t\tflagsPath,\r\n\t\tflagComponent : FlagComponent,\r\n\t\tinternationalIcon : InternationalIcon\r\n\t}\r\n\t= props\r\n\r\n\treturn ({ value }) => (\r\n\t\t<div\r\n\t\t\tclassName={classNames('react-phone-number-input__icon',\r\n\t\t\t{\r\n\t\t\t\t'react-phone-number-input__icon--international': value === undefined\r\n\t\t\t})}>\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t\t?\r\n\t\t\t\t<FlagComponent\r\n\t\t\t\t\tcountry={value}\r\n\t\t\t\t\tflags={flags}\r\n\t\t\t\t\tflagsPath={flagsPath}/>\r\n\t\t\t\t:\r\n\t\t\t\t<InternationalIcon/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\n// Can move some country `<select/>` options\r\n// to the top of the list, for example.\r\n// See `countryOptions` property.\r\nfunction transformCountryOptions(options, transform)\r\n{\r\n\tif (!transform) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tconst optionsOnTop = []\r\n\tconst optionsOnBottom = []\r\n\tlet appendTo = optionsOnTop\r\n\r\n\tfor (const element of transform)\r\n\t{\r\n\t\tif (element === '|')\r\n\t\t{\r\n\t\t\tappendTo.push({ divider: true })\r\n\t\t}\r\n\t\telse if (element === '...' || element === '…')\r\n\t\t{\r\n\t\t\tappendTo = optionsOnBottom\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Find the position of the option.\r\n\t\t\tconst index = options.indexOf(options.filter(option => option.value === element)[0])\r\n\t\t\t// Get the option.\r\n\t\t\tconst option = options[index]\r\n\t\t\t// Remove the option from its default position.\r\n\t\t\toptions.splice(index, 1)\r\n\t\t\t// Add the option on top.\r\n\t\t\tappendTo.push(option)\r\n\t\t}\r\n\t}\r\n\r\n\treturn optionsOnTop.concat(options).concat(optionsOnBottom)\r\n}\r\n\r\nfunction generateParsedInput(value, parsed_number, props)\r\n{\r\n\tconst\r\n\t{\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tmetadata\r\n\t}\r\n\t= props\r\n\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `displayInitialValueAsLocalNumber` property is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif (displayInitialValueAsLocalNumber && parsed_number.country)\r\n\t{\r\n\t\treturn generateNationalNumberDigits(parsed_number, metadata)\r\n\t}\r\n\r\n\treturn value\r\n}"]}