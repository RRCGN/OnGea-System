{"version":3,"sources":["../source/Autocomplete.js"],"names":["PureComponent","Component","empty_value_option_value","Autocomplete","state","optionsCounter","matchesCounter","inputValue","options","props","latestFetchOptionsCallTimestamp","counter","Counter","onPreloadStateChange","isPreloading","setState","isFetchingOptions","focus","input","onCollapse","collapsedDueToItemBeingSelected","focusOut","selectedOption","isExpanded","matches","undefined","collapsedDueToEmptyValueOnEnter","label","dontExpandOnFocus","onExpand","expand","_expand","parameters","list","collapse","toggle","storeListRef","ref","storeInput","node","storeInputComponentNode","inputComponentNode","getInputNode","expandOnFocus","onInputValueChange","value","focusItem","refresh","onKeyDown","event","disabled","required","defaultPrevented","ctrlKey","altKey","shiftKey","metaKey","keyCode","getFocusedItemIndex","preventDefault","setValue","isEmptyValue","refreshOptions","getOptions","filterOptions","Promise","resolve","throttleFetchOptionsCall","Date","now","getNextCounter","fetchingOptionsCounter","then","receiveNewOptions","error","console","newOptions","length","newValue","onChange","filter","_","onBlur","onClick","onFocusOut","getOption","isFetchingInitiallySelectedOption","option","clearTimeout","nextFetchOptionsCallTimeout","id","icon","compact","scroll","scrollMaxItems","scrollIntoView","alignment","saveOnIcons","indicateInvalid","closeButtonIcon","closeLabel","style","className","containerStyle","textAlign","renderTextInput","trim","map","i","content","placeholder","tabIndex","inputClassName","throttle","minCharactersToStartThrottling","wait","setTimeout","latestFetchOptionsCall","callback","newState","isCounterAfter","Array","isArray","propTypes","arrayOf","shape","any","string","oneOfType","func","isRequired","number","name","bool","object","showAllMatchingOptions","defaultProps","loading","getOptionKey","toLowerCase","indexOf","MAX_SAFE_INTEGER","Number","Math","pow","currentStateCounter","diff","abs"],"mappings":"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","file":"Autocomplete.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { polyfill as reactLifecyclesCompat } from 'react-lifecycles-compat'\r\nimport classNames from 'classnames'\r\n\r\nimport ExpandableList from './ExpandableList'\r\nimport List from './List'\r\nimport Label from './TextInputLabel'\r\nimport TextInput from './TextInputInput'\r\nimport Ellipsis from './Ellipsis'\r\n\r\nimport { onBlurForReduxForm } from './utility/redux-form'\r\n\r\nimport\r\n{\r\n\tsubmitFormOnCtrlEnter,\r\n\tsubmitContainingForm\r\n}\r\nfrom './utility/dom'\r\n\r\n// `PureComponent` is only available in React >= 15.3.0.\r\nconst PureComponent = React.PureComponent || React.Component\r\n\r\nconst empty_value_option_value = ''\r\n\r\n@reactLifecyclesCompat\r\nexport default class Autocomplete extends PureComponent\r\n{\r\n\tstatic propTypes =\r\n\t{\r\n\t\t// A list of selectable options\r\n\t\toptions : PropTypes.arrayOf\r\n\t\t(\r\n\t\t\tPropTypes.shape\r\n\t\t\t({\r\n\t\t\t\t// Option value (may be `undefined`)\r\n\t\t\t\tvalue : PropTypes.any,\r\n\t\t\t\t// Option label (may be `undefined`)\r\n\t\t\t\tlabel : PropTypes.string,\r\n\t\t\t\t// Option icon\r\n\t\t\t\ticon  : PropTypes.oneOfType\r\n\t\t\t\t([\r\n\t\t\t\t\tPropTypes.node,\r\n\t\t\t\t\tPropTypes.func\r\n\t\t\t\t]),\r\n\t\t\t\t// Render custom content (a React component).\r\n\t\t\t\t// Receives `{ value, label }` properties.\r\n\t\t\t\tcontent : PropTypes.func\r\n\t\t\t})\r\n\t\t)\r\n\t\t.isRequired,\r\n\r\n\t\t// An alternative way of getting `options`.\r\n\t\t// If it's an `autocomplete` then this function\r\n\t\t// receives the `query : string` argument.\r\n\t\t// Is only for `autocomplete` mode.\r\n\t\t// Must return a `Promise`.\r\n\t\tgetOptions : PropTypes.func,\r\n\r\n\t\t// Can be supplied when supplying `options` prop.\r\n\t\t// By default filters by substring inclusion (case-insensitive).\r\n\t\tfilterOptions : PropTypes.func,\r\n\r\n\t\t// Throttle `async getOptions()` invocations.\r\n\t\tthrottle : PropTypes.number.isRequired,\r\n\r\n\t\t// Throttle `async getOptions()` invocations.\r\n\t\tminCharactersToStartThrottling : PropTypes.number.isRequired,\r\n\r\n\t\t// HTML form input `name` attribute\r\n\t\tname       : PropTypes.string,\r\n\r\n\t\t// Label which is placed above the select\r\n\t\tlabel      : PropTypes.string,\r\n\r\n\t\t// Placeholder (like \"Choose\")\r\n\t\tplaceholder : PropTypes.string,\r\n\r\n\t\t// Show icon only for selected item,\r\n\t\t// and only if `icon` is `true`.\r\n\t\tsaveOnIcons : PropTypes.bool,\r\n\r\n\t\t// Disables this control\r\n\t\tdisabled   : PropTypes.bool,\r\n\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired   : PropTypes.bool.isRequired,\r\n\r\n\t\t// Selected option value\r\n\t\tvalue      : PropTypes.any,\r\n\r\n\t\t// Is called when an option is selected\r\n\t\tonChange   : PropTypes.func,\r\n\r\n\t\t// Is called when the select is blurred.\r\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\r\n\t\t// so that it gets the parsed `value` in its `onBlur` handler,\r\n\t\t// not the formatted text.\r\n\t\tonBlur     : PropTypes.func,\r\n\r\n\t\t// If `scroll` is `false`, then options list\r\n\t\t// is not limited in height.\r\n\t\t// Is `true` by default (scrollable).\r\n\t\tscroll     : PropTypes.bool.isRequired,\r\n\r\n\t\t// Component CSS class\r\n\t\tclassName  : PropTypes.string,\r\n\r\n\t\t// Autocomplete `<input/>` CSS class\r\n\t\tinputClassName : PropTypes.string,\r\n\r\n\t\t// CSS style object\r\n\t\tstyle      : PropTypes.object,\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// and `icon` is specified for a selected option,\r\n\t\t// then the selected option will be displayed\r\n\t\t// as icon only, without the label.\r\n\t\ticon       : PropTypes.bool,\r\n\r\n\t\t// If this flag is set to `true`,\r\n\t\t// then it makes `<Autocomplete/>` not stretch itself\r\n\t\t// to 100% width by making it `inline-block`.\r\n\t\t// Is set to `true` when `icon` is `true`\r\n\t\t// because it makes sense.\r\n\t\tcompact    : PropTypes.bool,\r\n\r\n\t\t// HTML `tabindex` attribute\r\n\t\ttabIndex   : PropTypes.number,\r\n\r\n\t\t// If set to `true`, autocomple will show all\r\n\t\t// matching options instead of just `maxItems`.\r\n\t\tshowAllMatchingOptions : PropTypes.bool,\r\n\r\n\t\t// `<Autocomplete/>` loads `async getOptions()` after it has been mounted.\r\n\t\t// Until then `<Autocomplete/>` doesn't display any selected option.\r\n\t\t// One may supply an already pre-loaded currently selected option\r\n\t\t// to display the currently selected option sooner (e.g. Server-Side Rendering).\r\n\t\tselectedOption : PropTypes.object\r\n\t}\r\n\r\n\tstatic defaultProps =\r\n\t{\r\n\t\t// Set to `true` to mark the field as required\r\n\t\trequired : false,\r\n\r\n\t\t// Show `error` (if passed).\r\n\t\tindicateInvalid : true,\r\n\r\n\t\t// Set to `true` to display the loading indicator\r\n\t\tloading : false,\r\n\r\n\t\t// Will show scrollbar on overflow.\r\n\t\tscroll : true,\r\n\r\n\t\talignment : 'left',\r\n\r\n\t\t// `async getOptions()` throttle period.\r\n\t\tthrottle : 200,\r\n\r\n\t\t// `async getOptions()` throttle threshold (in characters).\r\n\t\tminCharactersToStartThrottling : 4,\r\n\r\n\t\t// Filters options by substring inclusion (case-insensitive).\r\n\t\tfilterOptions\r\n\t}\r\n\r\n\tstate =\r\n\t{\r\n\t\t// The sequential counter for `async getOptions()`:\r\n\t\t// the `options` with the highest counter are shown\r\n\t\t// to prevent \"race condition\" inconsistency.\r\n\t\t// Older options can only be overwritten with newer ones.\r\n\t\toptionsCounter : 0,\r\n\t\tmatchesCounter : 0,\r\n\r\n\t\tinputValue : '',\r\n\t\toptions: [],\r\n\r\n\t\t// `prevProps` for `getDerivedStateFromProps()`.\r\n\t\tprops: {}\r\n\t}\r\n\r\n\t// Latest `async getOptions()` invocation timestamp (for throttling).\r\n\tlatestFetchOptionsCallTimestamp = 0\r\n\r\n\t// Older options can only be overwritten with newer ones.\r\n\t// (in case of `async getOptions()`).\r\n\tcounter = new Counter()\r\n\r\n\t// Handles changing `value` externally for an `<Autocomplete/>`.\r\n\tstatic getDerivedStateFromProps({ value, options }, state)\r\n\t{\r\n\t\tconst newState =\r\n\t\t{\r\n\t\t\t// `prevProps`.\r\n\t\t\tprops:\r\n\t\t\t{\r\n\t\t\t\tvalue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Changing `value` externally for an `<Autocomplete/>`\r\n\t\t// with `async getOptions()` is not supported.\r\n\t\tif (Array.isArray(options))\r\n\t\t{\r\n\t\t\t// `<Autocomplete/>`'s selected option label\r\n\t\t\t// is stored in a special `selectedOptionLabel` variable in `state`.\r\n\t\t\tif (value !== state.props.value)\r\n\t\t\t{\r\n\t\t\t\tnewState.selectedOption = options.filter(_ => _.value === value)[0]\r\n\t\t\t\tnewState.inputValue = newState.selectedOption ? newState.selectedOption.label : ''\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn newState\r\n\t}\r\n\r\n\tcomponentDidMount()\r\n\t{\r\n\t\tconst { value, getOption } = this.props\r\n\r\n\t\tif (!isEmptyValue(value) && getOption)\r\n\t\t{\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tisFetchingInitiallySelectedOption : true\r\n\t\t\t})\r\n\r\n\t\t\tgetOption(value).then((option) =>\r\n\t\t\t{\r\n\t\t\t\tthis.setState\r\n\t\t\t\t({\r\n\t\t\t\t\tselectedOption : option,\r\n\t\t\t\t\tinputValue : option ? option.label : '',\r\n\t\t\t\t\tisFetchingInitiallySelectedOption : false\r\n\t\t\t\t})\r\n\t\t\t},\r\n\t\t\t(error) =>\r\n\t\t\t{\r\n\t\t\t\tconsole.error(error)\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tisFetchingInitiallySelectedOption : false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentWillUnmount()\r\n\t{\r\n\t\tclearTimeout(this.nextFetchOptionsCallTimeout)\r\n\t}\r\n\r\n\tonPreloadStateChange = (isPreloading) => this.setState({ isFetchingOptions : isPreloading })\r\n\r\n\tfocus = () => this.input.focus()\r\n\r\n\tonCollapse = ({ collapsedDueToItemBeingSelected, focusOut }) =>\r\n\t{\r\n\t\tconst { options, selectedOption } = this.state\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tisExpanded : false,\r\n\t\t\tmatches : undefined\r\n\t\t})\r\n\r\n\t\tif (!collapsedDueToItemBeingSelected && !this.collapsedDueToEmptyValueOnEnter)\r\n\t\t{\r\n\t\t\tthis.setState\r\n\t\t\t({\r\n\t\t\t\tinputValue : selectedOption ? selectedOption.label : ''\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\tif (!focusOut)\r\n\t\t{\r\n\t\t\tthis.dontExpandOnFocus = true\r\n\t\t\tthis.focus()\r\n\t\t\tthis.dontExpandOnFocus = false\r\n\t\t}\r\n\t}\r\n\r\n\tonExpand = (options = {}) =>\r\n\t{\r\n\t\tthis.setState({ isExpanded: true })\r\n\t}\r\n\r\n\texpand = () =>\r\n\t{\r\n\t\t// Reset the \"matches\" state before expanding.\r\n\t\tthis.setState({ matches: true }, this._expand)\r\n\t}\r\n\r\n\t_expand  = (parameters) => this.list.expand(parameters)\r\n\tcollapse = () => this.list.collapse()\r\n\ttoggle   = () => this.list.toggle()\r\n\r\n\tstoreListRef = (ref) => this.list = ref\r\n\tstoreInput = (node) => this.input = node\r\n\tstoreInputComponentNode = (node) => this.inputComponentNode = node\r\n\r\n\tgetInputNode = () => this.input\r\n\r\n\trender()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tid,\r\n\t\t\ticon,\r\n\t\t\tcompact,\r\n\t\t\tscroll,\r\n\t\t\tscrollMaxItems,\r\n\t\t\tscrollIntoView,\r\n\t\t\talignment,\r\n\t\t\tsaveOnIcons,\r\n\t\t\trequired,\r\n\t\t\tlabel,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tindicateInvalid,\r\n\t\t\terror,\r\n\t\t\tcloseButtonIcon,\r\n\t\t\tcloseLabel,\r\n\t\t\tstyle,\r\n\t\t\tclassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\toptions,\r\n\t\t\tisFetchingOptions,\r\n\t\t\tisFetchingInitiallySelectedOption,\r\n\t\t\tisExpanded,\r\n\t\t\tinputValue\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tconst containerStyle = { textAlign: alignment }\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={ style ? { ...containerStyle, ...style } : containerStyle }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\t'rrui__autocomplete',\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__autocomplete--expanded' : isExpanded,\r\n\t\t\t\t\t\t'rrui__autocomplete--compact'  : compact || icon\r\n\t\t\t\t\t},\r\n\t\t\t\t\tclassName\r\n\t\t\t\t) }>\r\n\r\n\t\t\t\t<div\r\n\t\t\t\t\tref={ this.storeInputComponentNode }\r\n\t\t\t\t\tclassName=\"rrui__input\">\r\n\r\n\t\t\t\t\t{ (isFetchingOptions || isFetchingInitiallySelectedOption) && <Ellipsis/> }\r\n\r\n\t\t\t\t\t{/* Text input */}\r\n\t\t\t\t\t{ this.renderTextInput() }\r\n\r\n\t\t\t\t\t{/* Label */}\r\n\t\t\t\t\t{/* (this label is placed after the \"selected\" button\r\n\t\t\t\t\t     to utilize the CSS `+` selector) */}\r\n\t\t\t\t\t{ label &&\r\n\t\t\t\t\t\t<Label\r\n\t\t\t\t\t\t\tid={ id }\r\n\t\t\t\t\t\t\tvalue={ value }\r\n\t\t\t\t\t\t\trequired={ required }\r\n\t\t\t\t\t\t\tinvalid={ indicateInvalid && error }>\r\n\t\t\t\t\t\t\t{ label }\r\n\t\t\t\t\t\t</Label>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{/* The list of selectable options */}\r\n\t\t\t\t\t<ExpandableList\r\n\t\t\t\t\t\tref={this.storeListRef}\r\n\t\t\t\t\t\titems={options}\r\n\t\t\t\t\t\tfocusFirstItemWhenItemsChange={inputValue !== ''}\r\n\t\t\t\t\t\talignment={alignment}\r\n\t\t\t\t\t\tscrollIntoView={scrollIntoView}\r\n\t\t\t\t\t\tpreload={this.refreshOptions}\r\n\t\t\t\t\t\tonPreloadStateChange={this.onPreloadStateChange}\r\n\t\t\t\t\t\tscrollMaxItems={scroll === false ? 0 : scrollMaxItems}\r\n\t\t\t\t\t\tshouldFocus={false}\r\n\t\t\t\t\t\tvalue={options.length === 0 ? undefined : (inputValue.trim() === '' ? undefined : value)}\r\n\t\t\t\t\t\tonChange={this.setValue}\r\n\t\t\t\t\t\tonCollapse={this.onCollapse}\r\n\t\t\t\t\t\tonExpand={this.onExpand}\r\n\t\t\t\t\t\tfocusOnExpand={false}\r\n\t\t\t\t\t\thighlightSelectedItem={false}\r\n\t\t\t\t\t\tgetTogglerNode={this.getInputNode}\r\n\t\t\t\t\t\tonFocusOut={this.onFocusOut}\r\n\t\t\t\t\t\tcloseButtonIcon={closeButtonIcon}\r\n\t\t\t\t\t\tcloseLabel={closeLabel}\r\n\t\t\t\t\t\tclassName={classNames('rrui__shadow', 'rrui__options-list',\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t'rrui__options-list--left-aligned'  : alignment === 'left',\r\n\t\t\t\t\t\t\t'rrui__options-list--right-aligned' : alignment === 'right'\r\n\t\t\t\t\t\t})}>\r\n\r\n\t\t\t\t\t\t{options.map((option, i) => (\r\n\t\t\t\t\t\t\t<List.Item\r\n\t\t\t\t\t\t\t\tkey={i}\r\n\t\t\t\t\t\t\t\tvalue={option.value}\r\n\t\t\t\t\t\t\t\ticon={saveOnIcons ? undefined : option.icon}>\r\n\t\t\t\t\t\t\t\t{option.content ? option.content(option) : option.label}\r\n\t\t\t\t\t\t\t</List.Item>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ExpandableList>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t{/* Error message */}\r\n\t\t\t\t{ indicateInvalid && error &&\r\n\t\t\t\t\t<div className=\"rrui__input-error\">\r\n\t\t\t\t\t\t{ error }\r\n\t\t\t\t\t</div>\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\trenderTextInput()\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tvalue,\r\n\t\t\tplaceholder,\r\n\t\t\tdisabled,\r\n\t\t\trequired,\r\n\t\t\ttabIndex,\r\n\t\t\tinputClassName\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst\r\n\t\t{\r\n\t\t\tisExpanded,\r\n\t\t\tinputValue,\r\n\t\t\tmatches,\r\n\t\t\tisFetchingInitiallySelectedOption\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\treturn (\r\n\t\t\t<TextInput\r\n\t\t\t\tinputRef={ this.storeInput }\r\n\t\t\t\tvalue={ inputValue }\r\n\t\t\t\tonChange={ this.onInputValueChange }\r\n\t\t\t\tplaceholder={ placeholder }\r\n\t\t\t\tonKeyDown={ this.onKeyDown }\r\n\t\t\t\tonFocus={ this.expandOnFocus }\r\n\t\t\t\tonBlur={ this.onBlur }\r\n\t\t\t\tonClick={ this.onClick }\r\n\t\t\t\ttabIndex={ tabIndex }\r\n\t\t\t\tdisabled={ isFetchingInitiallySelectedOption || disabled }\r\n\t\t\t\tclassName={ classNames\r\n\t\t\t\t(\r\n\t\t\t\t\t'rrui__autocomplete__input',\r\n\t\t\t\t\tinputClassName,\r\n\t\t\t\t\t// CSS selector performance optimization\r\n\t\t\t\t\t// (should it even be optimized).\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t'rrui__input-field--invalid' : matches === false\r\n\t\t\t\t\t}\r\n\t\t\t\t) }/>\r\n\t\t)\r\n\t}\r\n\r\n\texpandOnFocus = () =>\r\n\t{\r\n\t\tif (this.dontExpandOnFocus) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tconst { isExpanded } = this.state\r\n\r\n\t\tif (!isExpanded)\r\n\t\t{\r\n\t\t\tthis.setState({ matches: true }, this.expand)\r\n\t\t}\r\n\t}\r\n\r\n\tonInputValueChange = (value) =>\r\n\t{\r\n\t\tconst { isExpanded } = this.state\r\n\r\n\t\tif (!value && isExpanded)\r\n\t\t{\r\n\t\t\tthis.list.focusItem(undefined)\r\n\t\t}\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tinputValue : value\r\n\t\t},\r\n\t\t() =>\r\n\t\t{\r\n\t\t\tthis._expand({ refresh: true })\r\n\t\t})\r\n\t}\r\n\r\n\tonKeyDown = (event) =>\r\n\t{\r\n\t\tconst { disabled, value, required } = this.props\r\n\t\tconst { isExpanded, inputValue } = this.state\r\n\r\n\t\tif (disabled) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (event.defaultPrevented) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tif (!isExpanded) {\r\n\t\t\tif (submitFormOnCtrlEnter(event, this.input)) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (event.ctrlKey || event.altKey || event.shiftKey || event.metaKey) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\tswitch (event.keyCode)\r\n\t\t{\r\n\t\t\t// \"Up\" arrow.\r\n\t\t\t// Select the previous item (if present).\r\n\t\t\tcase 38:\r\n\t\t\t\tif (isExpanded)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (this.list.getFocusedItemIndex() === undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Don't select any list item.\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse if (this.list.getFocusedItemIndex() === 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.list.focusItem(undefined)\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Down\" arrow.\r\n\t\t\t// Select the next item (if present).\r\n\t\t\tcase 40:\r\n\t\t\t\tif (isExpanded)\r\n\t\t\t\t{\r\n\t\t\t\t\t// Navigate the list (if it was already expanded).\r\n\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// Expand the list if it's collapsed.\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\tthis.expand()\r\n\t\t\t\t}\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Escape\".\r\n\t\t\t// Collapse.\r\n\t\t\tcase 27:\r\n\t\t\t\tevent.preventDefault()\r\n\t\t\t\tthis.collapse()\r\n\t\t\t\treturn\r\n\r\n\t\t\t// \"Enter\".\r\n\t\t\tcase 13:\r\n\t\t\t\tif (!inputValue)\r\n\t\t\t\t{\r\n\t\t\t\t\tif (isExpanded && this.list.getFocusedItemIndex() === undefined)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\tthis.setValue(undefined)\r\n\r\n\t\t\t\t\t\tthis.collapsedDueToEmptyValueOnEnter = true\r\n\t\t\t\t\t\tthis.collapse()\r\n\t\t\t\t\t\tthis.collapsedDueToEmptyValueOnEnter = undefined\r\n\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (!isExpanded)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif (isEmptyValue(value))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t// Submit containing `<form/>`.\r\n\t\t\t\t\t\t\t// If the value is required then expand instead.\r\n\t\t\t\t\t\t\tif (required)\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\t\t\tthis.expand()\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\t\tthis.setValue(undefined)\r\n\t\t\t\t\t\treturn\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Select the currently focused item (if expanded).\r\n\t\t\t\tif (isExpanded)\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.list.onKeyDown(event)\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\tthrottleFetchOptionsCall(resolve)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tthrottle,\r\n\t\t\tminCharactersToStartThrottling\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { inputValue } = this.state\r\n\r\n\t\tconst wait = throttle - (Date.now() - this.latestFetchOptionsCallTimestamp)\r\n\r\n\t\tif (inputValue.length >= minCharactersToStartThrottling && wait > 0)\r\n\t\t{\r\n\t\t\tif (!this.nextFetchOptionsCallTimeout)\r\n\t\t\t{\r\n\t\t\t\tthis.nextFetchOptionsCallTimeout = setTimeout(() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tthis.nextFetchOptionsCallTimeout = undefined\r\n\t\t\t\t\tthis.latestFetchOptionsCall()\r\n\t\t\t\t},\r\n\t\t\t\twait)\r\n\t\t\t}\r\n\r\n\t\t\tthis.latestFetchOptionsCall = () => this.refreshOptions().then(resolve)\r\n\t\t\treturn true\r\n\t\t}\r\n\t}\r\n\r\n\trefreshOptions = () =>\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tgetOptions,\r\n\t\t\tfilterOptions\r\n\t\t}\r\n\t\t= this.props\r\n\r\n\t\tconst { inputValue } = this.state\r\n\r\n\t\treturn new Promise((resolve) =>\r\n\t\t{\r\n\t\t\t// If throttled then schedule a future invocation.\r\n\t\t\tif (getOptions)\r\n\t\t\t{\r\n\t\t\t\tif (this.throttleFetchOptionsCall(resolve)) {\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.latestFetchOptionsCallTimestamp = Date.now()\r\n\r\n\t\t\t\tconst counter = this.counter.getNextCounter()\r\n\r\n\t\t\t\treturn this.setState\r\n\t\t\t\t({\r\n\t\t\t\t\tisFetchingOptions : true,\r\n\t\t\t\t\tfetchingOptionsCounter : counter\r\n\t\t\t\t},\r\n\t\t\t\t() =>\r\n\t\t\t\t{\r\n\t\t\t\t\tgetOptions(inputValue).then((options) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tthis.receiveNewOptions(options, counter, resolve)\r\n\t\t\t\t\t},\r\n\t\t\t\t\t(error) =>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconsole.error(error)\r\n\t\t\t\t\t\tthis.receiveNewOptions([], counter, resolve)\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tconst newOptions = filterOptions(this.props.options, inputValue)\r\n\r\n\t\t\treturn this.setState\r\n\t\t\t({\r\n\t\t\t\tmatches : newOptions.length > 0,\r\n\t\t\t\toptions : newOptions.length > 0 ? newOptions : this.state.options\r\n\t\t\t},\r\n\t\t\tresolve)\r\n\t\t})\r\n\t}\r\n\r\n\treceiveNewOptions(options, counter, callback)\r\n\t{\r\n\t\tconst\r\n\t\t{\r\n\t\t\tmatchesCounter,\r\n\t\t\toptionsCounter,\r\n\t\t\tfetchingOptionsCounter\r\n\t\t}\r\n\t\t= this.state\r\n\r\n\t\tconst newState = {}\r\n\r\n\t\t// Can only override \"older\" matching state.\r\n\t\tif (isCounterAfter(counter, matchesCounter))\r\n\t\t{\r\n\t\t\tnewState.matches = options.length > 0\r\n\t\t\tnewState.matchesCounter = counter\r\n\t\t}\r\n\r\n\t\t// Update options.\r\n\t\t// Can only override \"older\" options.\r\n\t\t// (not \"newer\" ones)\r\n\t\tif (isCounterAfter(counter, optionsCounter))\r\n\t\t{\r\n\t\t\t// Autocomplete should always display some options.\r\n\t\t\tif (options.length > 0)\r\n\t\t\t{\r\n\t\t\t\tnewState.options = options\r\n\t\t\t\tnewState.optionsCounter = counter\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (counter === fetchingOptionsCounter)\r\n\t\t{\r\n\t\t\tnewState.isFetchingOptions = false\r\n\t\t\tnewState.fetchingOptionsCounter = undefined\r\n\t\t}\r\n\r\n\t\tthis.setState(newState, callback)\r\n\t}\r\n\r\n\tsetValue = (newValue) =>\r\n\t{\r\n\t\tconst { value, onChange } = this.props\r\n\t\tconst { options } = this.state\r\n\r\n\t\tconst selectedOption = options.filter(_ => _.value === newValue)[0]\r\n\r\n\t\tthis.setState\r\n\t\t({\r\n\t\t\tselectedOption,\r\n\t\t\tinputValue : selectedOption ? selectedOption.label : ''\r\n\t\t})\r\n\r\n\t\t// Call `onChange` only if the `value` did change.\r\n\t\tif (newValue !== value) {\r\n\t\t\tonChange(newValue)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => this.list && this.list.onBlur(event)\r\n\r\n\tonClick = (event) =>\r\n\t{\r\n\t\tconst { disabled } = this.props\r\n\r\n\t\tif (!disabled) {\r\n\t\t\tthis.expandOnFocus()\r\n\t\t}\r\n\t}\r\n\r\n\tonFocusOut = () =>\r\n\t{\r\n\t\tlet { onBlur, value } = this.props\r\n\t\tconst { inputValue } = this.state\r\n\r\n\t\tthis.collapse()\r\n\r\n\t\tif (!inputValue)\r\n\t\t{\r\n\t\t\tvalue = undefined\r\n\t\t\tthis.setValue(value)\r\n\t\t}\r\n\r\n\t\tif (onBlur) {\r\n\t\t\tonBlurForReduxForm(onBlur, event, value)\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// There can be an `undefined` value,\r\n// so just `{ value }` won't do here.\r\nfunction getOptionKey(value)\r\n{\r\n\treturn isEmptyValue(value) ? '@@rrui/empty' : value\r\n}\r\n\r\nfunction isEmptyValue(value)\r\n{\r\n\treturn value === null || value === undefined\r\n}\r\n\r\n// Filters options by substring inclusion (case-insensitive).\r\nfunction filterOptions(options, value)\r\n{\r\n\t// If the input value is `undefined` or empty.\r\n\tif (!value) {\r\n\t\treturn options\r\n\t}\r\n\r\n\tvalue = value.toLowerCase()\r\n\r\n\treturn options.filter(({ label }) => label.toLowerCase().indexOf(value) >= 0)\r\n}\r\n\r\nclass Counter\r\n{\r\n\tcounter = 0\r\n\r\n\tgetNextCounter()\r\n\t{\r\n\t\tif (this.counter < MAX_SAFE_INTEGER) {\r\n\t\t\tthis.counter++\r\n\t\t} else {\r\n\t\t\tthis.counter = 1\r\n\t\t}\r\n\t\treturn this.counter\r\n\t}\r\n}\r\n\r\n// `MAX_SAFE_INTEGER` is not supported by older browsers\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n// Can only override \"older\" options.\r\n// (not \"newer\" ones)\r\nfunction isCounterAfter(counter, currentStateCounter)\r\n{\r\n\tconst diff = counter - currentStateCounter\r\n\r\n\t// If the new options are \"newer\" than the current ones,\r\n\t// then they can override them.\r\n\t// (also accounts for counter overflow)\r\n\treturn diff > 0 || (diff < 0 && Math.abs(diff) > MAX_SAFE_INTEGER / 2)\r\n}"]}