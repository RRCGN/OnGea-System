'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _throttle = require('lodash/throttle');

var _throttle2 = _interopRequireDefault(_throttle);

var _grid = require('./utility/grid');

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

var TextInput = (_temp2 = _class = function (_PureComponent) {
	_inherits(TextInput, _PureComponent);

	function TextInput() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, TextInput);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = TextInput.__proto__ || Object.getPrototypeOf(TextInput)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.autoresize = function (event) {
			var measurements = _this.measurements();
			var element = event ? event.target : _this.input;

			element.style.height = 0;

			// `element.scrollHeight` is always an integer
			// so it doesn't need rounding (e.g. `em`s).
			var height = element.scrollHeight + measurements.extra_height;
			height = Math.max(height, measurements.initial_height);

			if ((0, _grid.getModularGridUnit)() && height % (0, _grid.getModularGridUnit)()) {
				height = Math.ceil(height / (0, _grid.getModularGridUnit)()) * (0, _grid.getModularGridUnit)();
			}

			// For some reason Chrome on Windows 10
			// requires an extra pixel been added
			// to avoid showing vertical scrollbar.
			// (Jan 11, 2018)
			if (height > measurements.initial_height) {
				height += 1;
			}

			element.style.height = height + 'px';
		}, _this.onWindowResize = (0, _throttle2.default)(function (event) {
			return _this.autoresize();
		}, 100), _this.measure = function () {
			return autoresize_measure(_this.input);
		}, _this.onChange = function (event) {
			// Extract `value` from the argument
			// of this `onChange` listener
			// (for convenience)

			var value = event;

			if (event.target !== undefined) {
				value = event.target.value;
			}

			// Call the parent `onChange` handler
			// with the `value` as an argument
			// (for convenience)

			var onChange = _this.props.onChange;

			// Call `onChange` only if `value` did actually change

			if (value !== _this.props.value) {
				onChange(value);
			}
		}, _this.onKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if (event.defaultPrevented) {
				return;
			}

			if ((0, _dom.submitFormOnCtrlEnter)(event, _this.input)) {
				return;
			}
		}, _this.storeInputNode = function (node) {
			var inputRef = _this.props.inputRef;


			if (inputRef) {
				inputRef(node);
			}

			_this.input = node;
		}, _this.focus = function () {
			return _this.input.focus();
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(TextInput, [{
		key: 'componentDidMount',


		// Client side rendering, javascript is enabled
		value: function componentDidMount() {
			var _props = this.props,
			    multiline = _props.multiline,
			    autoresize = _props.autoresize,
			    value = _props.value;

			// Doing `this.measure()` here now
			// because `<textarea/>` should autoresize
			// in case its `value` is set up front.
			// // Not doing `this.measure()` here because
			// // that resulted in weird `<textarea/>` height mismatch.
			// // Measuring the height of `<textarea/>` during
			// // the first `this.measurements()` call instead.

			if (multiline && autoresize && value) {
				this.autoresize();
			}

			if (multiline && autoresize) {
				window.addEventListener('resize', this.onWindowResize);
			}
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var _props2 = this.props,
			    multiline = _props2.multiline,
			    autoresize = _props2.autoresize;


			if (multiline && autoresize) {
				window.removeEventListener('resize', this.onWindowResize);
			}
		}
	}, {
		key: 'measurements',
		value: function measurements() {
			var measurements = this.state.autoresize;

			// If it's the first time accessing measurements,
			// or if the textarea was initially hidden
			// (like `display: none` for a mobile-oriented responsive design)
			// then make the initial measurements now.
			if (!measurements || !measurements.initial_height) {
				measurements = this.measure();

				// If the `<textarea/>` is not hidden (e.g. via `display: none`)
				// then keep its initial (minimum) height
				// so that it doesn't shrink below this value
				if (measurements.initial_height) {
					this.setState({ autoresize: measurements });
				}
			}

			return measurements;
		}

		// The underlying `input` component
		// can pass both `event`s and `value`s
		// to this parent `onChange` listener.

	}, {
		key: 'render',
		value: function render() {
			var _props3 = this.props,
			    name = _props3.name,
			    value = _props3.value,
			    multiline = _props3.multiline,
			    inputComponent = _props3.inputComponent,
			    focus = _props3.focus,
			    onChange = _props3.onChange,
			    disabled = _props3.disabled,
			    type = _props3.type,
			    autoresize = _props3.autoresize,
			    indicateInvalid = _props3.indicateInvalid,
			    error = _props3.error,
			    className = _props3.className,
			    inputRef = _props3.inputRef,
			    containerRef = _props3.containerRef,
			    floatingLabel = _props3.floatingLabel,
			    required = _props3.required,
			    children = _props3.children,
			    rest = _objectWithoutProperties(_props3, ['name', 'value', 'multiline', 'inputComponent', 'focus', 'onChange', 'disabled', 'type', 'autoresize', 'indicateInvalid', 'error', 'className', 'inputRef', 'containerRef', 'floatingLabel', 'required', 'children']);

			var inputStyle = this.props.inputStyle;


			if (multiline && autoresize) {
				inputStyle = _extends({
					resize: 'none'
				}, inputStyle);
			}

			var properties = _extends({}, rest, {
				name: name === false ? undefined : name,
				ref: this.storeInputNode,
				value: value === undefined || value === null ? '' : value,
				disabled: disabled,
				onChange: this.onChange,
				onKeyDown: this.onKeyDown,
				className: (0, _classnames2.default)('rrui__input-element', 'rrui__input-field', {
					// CSS selector performance optimization
					'rrui__input-field--invalid': indicateInvalid && error,
					'rrui__input-field--disabled': disabled,
					'rrui__input-field--multiline': multiline
				}, className),
				style: inputStyle,
				autoFocus: focus

				// In case of `multiline` set to `true`
				// this is gonna be a `<textarea/>`
			});if (multiline) {
				// "keyup" is required for IE to properly reset height when deleting text
				return _react2.default.createElement('textarea', _extends({}, properties, {
					onInput: autoresize ? this.autoresize : undefined,
					onKeyUp: autoresize ? this.autoresize : undefined }));
			}

			// Add `<input/>` `type` property.
			if (inputComponent === 'input') {
				properties.type = type || 'text';
			}

			return _react2.default.createElement(inputComponent, properties);
		}
	}]);

	return TextInput;
}(PureComponent), _class.propTypes = {
	// `<input type/>` attribute.
	type: _propTypes2.default.string,

	// Whether `<textarea/>` should autoresize itself
	// (is `true` by default)
	autoresize: _propTypes2.default.bool.isRequired,

	// Set to `false` to prevent the `<label/>` from floating
	floatingLabel: _propTypes2.default.bool.isRequired,

	// A custom input component.
	// (is `<input/>` by default)
	inputComponent: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]).isRequired
}, _class.defaultProps = {
	// `<textarea/>` should autoresize itself
	autoresize: true,

	// Set to `false` to prevent the `<label/>` from floating
	floatingLabel: true,

	// A custom input component.
	// (is `<input/>` by default)
	inputComponent: 'input' }, _temp2);

// <textarea/> autoresize (without ghost elements)
// https://github.com/javierjulio/textarea-autosize/blob/master/src/jquery.textarea_autosize.js

exports.default = TextInput;
function autoresize_measure(element) {
	var style = getComputedStyle(element);

	// Borders extra height, because `.scrollHeight` doesn't include borders.
	var extra_height = parseInt(style.borderTopWidth) + parseInt(style.borderBottomWidth);

	// `<textarea/>`'s height is a float when using `em`, `rem`, `pt`, etc.
	var non_rounded_initial_height = element.getBoundingClientRect().height;
	var initial_height = Math.ceil(non_rounded_initial_height);

	// Round the height of `<textarea/>` so that it doesn't jump
	// when autoresizing while typing for the first time.
	if (initial_height !== non_rounded_initial_height) {
		element.style.height = initial_height + 'px';
	}

	return { extra_height: extra_height, initial_height: initial_height };
}
//# sourceMappingURL=TextInputInput.js.map