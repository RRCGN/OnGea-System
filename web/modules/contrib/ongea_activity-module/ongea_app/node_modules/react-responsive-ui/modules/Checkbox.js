'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp2;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _dom = require('./utility/dom');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// `PureComponent` is only available in React >= 15.3.0.
var PureComponent = _react2.default.PureComponent || _react2.default.Component;

// http://tympanus.net/codrops/2013/10/15/animated-checkboxes-and-radio-buttons-with-svg/

var Checkbox = (_temp2 = _class = function (_PureComponent) {
	_inherits(Checkbox, _PureComponent);

	function Checkbox() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, Checkbox);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Checkbox.__proto__ || Object.getPrototypeOf(Checkbox)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this.onKeyDown = function (event) {
			var onKeyDown = _this.props.onKeyDown;


			if (onKeyDown) {
				onKeyDown(event);
			}

			if (event.defaultPrevented) {
				return;
			}

			if ((0, _dom.submitFormOnCtrlEnter)(event, _this.input)) {
				return;
			}
		}, _this.storeInstance = function (ref) {
			return _this.checkbox = ref;
		}, _this.focus = function () {
			return _this.checkbox.focus();
		}, _this.toggle = function (event) {
			// If a link was clicked - don't treat it as a checkbox label click.
			// (is used for things like "âœ“ Read and accepted the <a>licence agreement</a>")
			if (event.target.tagName.toLowerCase() === 'a') {
				return;
			}

			_this.focus();

			var _this$props = _this.props,
			    disabled = _this$props.disabled,
			    onChange = _this$props.onChange,
			    value = _this$props.value;


			if (disabled) {
				return;
			}

			onChange(!value);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(Checkbox, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    value = _props.value,
			    error = _props.error,
			    indicateInvalid = _props.indicateInvalid,
			    multiline = _props.multiline,
			    disabled = _props.disabled,
			    children = _props.children,
			    style = _props.style,
			    className = _props.className;


			return _react2.default.createElement(
				'div',
				{
					className: (0, _classnames2.default)('rrui__checkbox', {
						// 'rrui__checkbox--checked'  : value,
						'rrui__checkbox--invalid': indicateInvalid && error,
						'rrui__checkbox--disabled': disabled
					}, className),
					style: style },
				_react2.default.createElement(
					'div',
					{
						className: (0, _classnames2.default)('rrui__input', {
							'rrui__input--multiline': multiline
						}) },
					_react2.default.createElement(
						'div',
						{ className: 'rrui__checkbox__checkbox' },
						_react2.default.createElement('input', {
							ref: this.storeInstance,
							type: 'checkbox',
							checked: value,
							disabled: disabled,
							onKeyDown: this.onKeyDown,
							onChange: this.toggle,
							onFocus: this.on_focus,
							onBlur: this.on_blur,
							className: 'rrui__checkbox__input' }),
						_react2.default.createElement(
							'svg',
							{
								className: (0, _classnames2.default)('rrui__checkbox__box', {
									'rrui__checkbox__box--checked': value
								}),
								focusable: 'false',
								viewBox: '0 0 24 24',
								'aria-hidden': 'true' },
							_react2.default.createElement('path', { d: value ? CHECKBOX_CHECKED_PATH : CHECKBOX_UNCHECKED_PATH }),
							' }'
						)
					),
					children && _react2.default.createElement(
						'label',
						{
							onClick: this.toggle,
							className: (0, _classnames2.default)('rrui__checkbox__label', {
								'rrui__checkbox__label--multiline': multiline
							}) },
						children
					)
				),
				indicateInvalid && error && _react2.default.createElement(
					'div',
					{ className: 'rrui__input-error' },
					error
				)
			);
		}

		// render_static()
		// {
		// 	const { name, value, focus, disabled, children } = this.props
		//
		// 	return (
		// 		<div className="rrui__rich__fallback">
		// 			{/* This checkbox will be sent as either "on" or `undefined` */}
		// 			<input
		// 				type="checkbox"
		// 				name={ name }
		// 				disabled={ disabled }
		// 				defaultChecked={ value }
		// 				autoFocus={ focus }/>
		//
		// 			<label className="rrui__checkbox__label rrui__checkbox__label--fallback">
		// 				{ children }
		// 			</label>
		// 		</div>
		// 	)
		// }

	}]);

	return Checkbox;
}(PureComponent), _class.propTypes = {
	// HTML form field "name"
	name: _propTypes2.default.string,

	// `true`/`false`
	value: _propTypes2.default.bool.isRequired,

	// Set to `true` to enable multiline label
	multiline: _propTypes2.default.bool.isRequired,

	// Disables the checkbox
	disabled: _propTypes2.default.bool.isRequired,

	// `onChange` handler
	onChange: _propTypes2.default.func,

	// When `true` autofocuses the checkbox
	focus: _propTypes2.default.bool.isRequired,

	// The label (text)
	children: _propTypes2.default.node,

	// CSS class
	className: _propTypes2.default.string,

	// CSS style object
	style: _propTypes2.default.object
}, _class.defaultProps = {
	disabled: false,
	value: false,
	multiline: false,
	focus: false,

	// Show `error` (if passed).
	indicateInvalid: true
}, _temp2);
exports.default = Checkbox;


var CHECKBOX_CHECKED_PATH = "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z";
var CHECKBOX_UNCHECKED_PATH = "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z";
//# sourceMappingURL=Checkbox.js.map