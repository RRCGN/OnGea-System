'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _enzyme = require('enzyme');

var _withSnackbar = require('./withSnackbar');

var _withSnackbar2 = _interopRequireDefault(_withSnackbar);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /* eslint-env jest */


describe('withSnackbar', function () {
  it('adds a snackbar prop', function () {
    var dummyContext = {
      snackbar: {}
    };

    var DummySnackbarProvider = function (_React$Component) {
      _inherits(DummySnackbarProvider, _React$Component);

      function DummySnackbarProvider() {
        _classCallCheck(this, DummySnackbarProvider);

        return _possibleConstructorReturn(this, (DummySnackbarProvider.__proto__ || Object.getPrototypeOf(DummySnackbarProvider)).apply(this, arguments));
      }

      _createClass(DummySnackbarProvider, [{
        key: 'getChildContext',
        value: function getChildContext() {
          return dummyContext;
        }
      }, {
        key: 'render',
        value: function render() {
          return _react2.default.createElement('div', this.props);
        }
      }]);

      return DummySnackbarProvider;
    }(_react2.default.Component);

    DummySnackbarProvider.childContextTypes = {
      snackbar: _propTypes2.default.any
    };

    var Component = function Component() {
      return _react2.default.createElement('div', null);
    };
    var ComponentWithSnackbar = (0, _withSnackbar2.default)()(Component);

    var tree = (0, _enzyme.mount)(_react2.default.createElement(
      DummySnackbarProvider,
      null,
      _react2.default.createElement(ComponentWithSnackbar, null)
    )).find(Component);

    expect(tree.prop('snackbar')).toBe(dummyContext.snackbar);
  });
});