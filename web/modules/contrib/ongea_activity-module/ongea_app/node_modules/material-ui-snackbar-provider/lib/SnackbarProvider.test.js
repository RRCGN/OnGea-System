'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _SnackbarProvider = require('./SnackbarProvider');

var _SnackbarProvider2 = _interopRequireDefault(_SnackbarProvider);

var _core = require('@material-ui/core');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-env jest */
describe('SnackbarProvider', function () {
  it('adds a snackbar property to the context', function () {
    var tree = (0, _enzyme.shallow)(_react2.default.createElement(_SnackbarProvider2.default, null));

    var childContext = tree.instance().getChildContext();
    expect(childContext).toEqual({
      snackbar: {
        showMessage: expect.any(Function)
      }
    });
  });

  it('does not display a snackbar by default', function () {
    var tree = (0, _enzyme.mount)(_react2.default.createElement(_SnackbarProvider2.default, null));
    expect(tree.find(_core.Snackbar).prop('open')).toBe(false);
  });

  it('shows a snackbar after calling showMessage', function () {
    var tree = (0, _enzyme.mount)(_react2.default.createElement(_SnackbarProvider2.default, null));

    showMessage(tree, 'Something went wrong');
    tree.update();
    expect(tree.find(_core.Snackbar).prop('open')).toBe(true);
    expect(tree.find(_core.Snackbar).prop('message')).toBe('Something went wrong');
    expect(tree.find(_core.Snackbar).prop('action')).toBeFalsy();
  });

  it('can display an action button', function () {
    var tree = (0, _enzyme.mount)(_react2.default.createElement(_SnackbarProvider2.default, null));

    showMessage(tree, 'Something went wrong', 'Retry', function () {});
    tree.update();
    expect(tree.find(_core.Snackbar).find(_core.Button).text()).toBe('Retry');
  });

  it('calls the action callback after clicking the button and closes the snackbar', function () {
    var tree = (0, _enzyme.mount)(_react2.default.createElement(_SnackbarProvider2.default, null));
    var actionCallback = jest.fn();
    showMessage(tree, 'Something went wrong', 'Retry', actionCallback);
    tree.update();

    tree.find(_core.Snackbar).find(_core.Button).simulate('click');
    expect(actionCallback).toHaveBeenCalled();
    tree.update();
    expect(tree.find(_core.Snackbar).prop('open')).toBe(false);
  });

  it('hides the snackbar when its onClose prop is called', function () {
    var tree = (0, _enzyme.mount)(_react2.default.createElement(_SnackbarProvider2.default, null));
    showMessage(tree, 'Test');
    tree.update();

    tree.find(_core.Snackbar).prop('onClose')();
    tree.update();
    expect(tree.find(_core.Snackbar).prop('open')).toBe(false);
  });

  it('propagates SnackbarProps to the Snackbar component', function () {
    var tree = (0, _enzyme.mount)(_react2.default.createElement(_SnackbarProvider2.default, { SnackbarProps: { autoHideDuration: 6000 } }));
    expect(tree.find(_core.Snackbar).prop('autoHideDuration')).toBe(6000);
  });
});

function showMessage(snackbarProvider) {
  var _snackbarProvider$ins;

  for (var _len = arguments.length, other = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    other[_key - 1] = arguments[_key];
  }

  (_snackbarProvider$ins = snackbarProvider.instance().getChildContext().snackbar).showMessage.apply(_snackbarProvider$ins, other);
}