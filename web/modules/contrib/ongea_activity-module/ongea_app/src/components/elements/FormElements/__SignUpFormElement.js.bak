import React from 'react';
import Panel from '../../elements/Panel';
import {SwitchInput, RadioInput} from '../../elements/FormElements/FormElements';
import FormRowLayout from '../../elements/FormElements/FormRowLayout';
import { Lists } from '../../../config/content_types';
import CircularProgress from '@material-ui/core/CircularProgress';
import {delete as axiosDelete} from 'axios';

import Table from '@material-ui/core/Table';
import TableBody from '@material-ui/core/TableBody';
import TableCell from '@material-ui/core/TableCell';
import TableHead from '@material-ui/core/TableHead';
import TableRow from '@material-ui/core/TableRow';
import Radio from '@material-ui/core/Radio';
 
 


export class SignupFormElementForm extends React.Component {
   
  constructor(props) {
        super(props);
        //console.log('Sdfsdf',props.value);
        this.state = {
          signUpFormValue: props.value ? props.value : {},
          selectOptions : {}
        };



      }


  componentDidMount(){
      let selectOptions = {};
      const selects = ['whoCanSee', "signUpFormSettings", "signUpFormFieldSettings"];

      selects.map((select)=>{

          Lists.getDataAsync(Lists.types[select])
          .then((result)=>{
            
              selectOptions[select] = result;
              this.setState({selectOptions});
            });
          

      });
      
   
      
  }    

componentWillReceiveProps(newProps){ //For Reset Button Click, not yet working correctly
  //console.log('GGGGGG',newProps);
  if(!newProps.dirty){
    const signUpFormValue = newProps.value || {};
    this.setState({signUpFormValue});
  }

}
  
  handleChange = (event) => {

    let signUpFormValue = Object.assign(this.state.signUpFormValue);
    


    if(event.target.type == "checkbox"){
        signUpFormValue[event.target.name] = event.target.checked;
    }
    else
    {
        signUpFormValue[event.target.name] = event.target.value;
    }

     
    //console.log('SignUpFormElement Value: ',signUpFormValue);
    this.setState({signUpFormValue});
    if(signUpFormValue.signupIsActive){

      this.props.setFieldValue(this.props.id,signUpFormValue, true);

      if(event.target.name == "signupIsActive"){
        this.createForm();
      }

    }
    else
    {
      if(signUpFormValue.id){
        this.deleteForm(signUpFormValue.id);
      }
      this.props.setFieldValue(this.props.id,false);
    }
  }



  deleteForm = (id) => {

    console.log('DELETE FORM: ',id);
    const url = 'http://ongea.nano-dev.de/api/v2/activitiesform/'+id+'/?_format=json';

            var config = {
              headers: {
                'content-type': 'application/hal+json',
                'Authorization': 'Basic YXBpOmFwaQ=='
              }
            };


              axiosDelete(url, config).then(response => {
                console.log(response);

            }).catch(error => {
              console.log(error);
            })
         

  }

  createForm = () => {

    console.log('CREATE FORM: ');
    let signUpFormValue = {};


    const form = document.getElementById("SignUpFormContainer");
    const allInputs = form.getElementsByTagName("input");
    const allInputsArray = Array.from(allInputs);
    //console.log(allInputs);

    const length = allInputsArray.length;
    var inputName = '';
    var inputValue = [];
    for (var i = 0; i < length; i++) {
      const input = allInputsArray[i];
      var previousInput = false;
      if(i>0){
        previousInput = allInputsArray[i-1];
      }
      inputName = allInputsArray[i].name;
       

      

        if(previousInput && previousInput.name != input.name){
          signUpFormValue[previousInput.name] = inputValue;
          inputValue = [];
        }

        if((input.type == "checkbox" || input.type == "radio")){
          if(input.checked){

            inputValue = input.value || input.checked;
            
            //console.log(input.name,isChecked);
          }
        }
        

      
    }
    
    console.log('NEW FORM: ',signUpFormValue);
    this.setState({signUpFormValue});
    this.props.setFieldValue(this.props.id,signUpFormValue);
  }



    render() {

      const matrixData = [
          {id:'signupNickname', label:'Nickname'},
          {id:'signupBirthday', label:'Birthdate'},
          {id:'signupGender', label:'Gender'},
          {id:'signupAboutme', label:'About me'}, 
          {id:'signupStreet', label:'Street'}, 
          {id:'signupPostcode', label:'Postcode'}, 
          {id:'signupTown', label:'Town'}, 
          {id:'signupRegion', label:'Region'},
          {id:'signupCountry', label:'Country'}, 
          {id:'signupPhone', label:'Phone'}, 
          {id:'signupPassId', label:'Passport ID'}, 
          {id:'signupIssuedOn', label:'issued on'}, 
          {id:'signupExpiresOn', label:'expires on'}, 
          {id:'signupNationality', label:'Nationality'}, 
          {id:'signupWebsite', label:'Homepage / Social Media Profile'}, 
          {id:'signupProfilePic', label:'Profile picture'}, 
          {id:'signupEmergencyContact', label:'Emergency Contact Name'},
          {id:'signupEmergencyPhone', label:'Emergency Contact Phone number (mobile)'}, 
          {id:'signupSkills', label:'Skills and interests'}, 
          {id:'signupExampleOf', label:'Example of skills and interests'}, 
          {id:'signupFoodOptions', label:'I eat'}, 
          {id:'signupFoodRequirements', label:'Additional food requirements'}, 
          {id:'signupSkillsRelated', label:'Skills and interests for this project'}, 
          {id:'signupSkillsDetails', label:'Skills and interests for this activity'}, 
          {id:'signupMotiviation', label:'What is your motivation to participate in this project?'}, 
          {id:'signupHearAbout', label:'How did you hear about this project?'}, 
          {id:'signupRoomRequirements', label:'Room requirements'}, 
          {id:'signupCanShare', label:'Can share with'},
          {id:'signupSpecialaccomodation', label:'Special accomodation'}, 
          {id:'signupMedicalrequirements', label:'Medical requirements'}
      ];

      const props = this.props;
      const {signUpFormValue} = this.state;
      const selectOptions = this.state.selectOptions;

     //console.log(selectOptions);
       return (
           
              <div id="SignUpFormContainer">
                    <Panel label={props.t("Online sign-up form")}>
                         <FormRowLayout infoLabel={props.t("Online sign-up form__description")} infoLabelFullHeight={true}>
                            <SwitchInput
                              id="signupIsActive"
                              name="signupIsActive"
                              label={props.t("Online sign-up form")}
                              error={props.error}
                              value={(signUpFormValue && signUpFormValue.signupIsActive) ? true : false}
                              onChange={this.handleChange}
                              onBlur={props.handleBlur}
                            />
                        </FormRowLayout>
                    </Panel>

                  
                     <Panel label=''>
                         <FormRowLayout>
                            
                            <RadioInput
                              id="whoCanSee"
                              name="whoCanSee"
                              disabled={signUpFormValue.signupIsActive && selectOptions.whoCanSee ? false : true}
                              label={props.t("Who can see and fill in a sign-up form?")}
                              value={signUpFormValue && signUpFormValue.whoCanSee ? signUpFormValue.whoCanSee : (selectOptions.whoCanSee && selectOptions.whoCanSee[2])}
                              onChange={this.handleChange}
                              onBlur={props.handleBlur}
                              options={selectOptions.whoCanSee ? selectOptions.whoCanSee.map((setting)=>{return({value:setting,label:setting})}) : []}
                            />
                            {selectOptions.whoCanSee ? null : <CircularProgress size={24} className='ongeaAct__activity__all_forms__selectLoading'/>}

    
                        </FormRowLayout>
                    </Panel>

                    <Panel label=''>
                         <FormRowLayout>
                            
                            <RadioInput
                              id="showSignup"
                              name="showSignup"
                              label={props.t("Show this sign-up form")}
                              disabled={signUpFormValue.signupIsActive ? false : true}
                              value={signUpFormValue && signUpFormValue.showSignup ? signUpFormValue.showSignup : 'in the OnGea App'}
                              onChange={this.handleChange}
                              onBlur={props.handleBlur}
                              options={[
                                        {value:'in the OnGea App',label:'in the OnGea App'},
                                        {value:'on [website channel a ... z]',label:'on [website channel a ... z]'}
                                        ]}
                            />
    
                        </FormRowLayout>
                    </Panel>

                    <Panel label=''>
                         <FormRowLayout>
                            
                            <RadioInput
                              id="assigningOrgs"
                              name="assigningOrgs"
                              label={props.t("Assigning sending organisation")}
                              disabled={signUpFormValue.signupIsActive && selectOptions.signUpFormSettings ? false : true}
                              value={signUpFormValue && signUpFormValue.assigningOrgs ? signUpFormValue.assigningOrgs : (selectOptions.signUpFormSettings && selectOptions.signUpFormSettings[1])}
                              onChange={this.handleChange}
                              onBlur={props.handleBlur}
                              options={selectOptions.signUpFormSettings ? selectOptions.signUpFormSettings.map((setting)=>{return({value:setting,label:setting})}) : []}
                            />
                        {selectOptions.signUpFormSettings ? null : <CircularProgress size={24} className='ongeaAct__activity__all_forms__selectLoading'/>}

    
                        </FormRowLayout>
                    </Panel>

                    <Panel label='Adjust sign-up form'>
                         
                          <Table>
                              <TableHead>
                                <TableRow>
                                  <TableCell></TableCell>
                                  {selectOptions.signUpFormFieldSettings ? selectOptions.signUpFormFieldSettings.map((setting)=>{
                                    return(<TableCell key={setting}>{setting}</TableCell>);

                                  }): null}
                                  
                                </TableRow>
                              </TableHead>
                              <TableBody>
                                
                                  {matrixData.map(
                                    (row) => {
                                        return(
                                         <TableRow key={row.id}>
                                      <TableCell component="th" scope="row"> 
                                        {row.label}
                                      </TableCell>
                                      {selectOptions.signUpFormFieldSettings ? selectOptions.signUpFormFieldSettings.map((setting)=>{
                                          return(
                                            <TableCell key={row.id+'-'+setting}>
                                              <Radio
                                                    checked={(setting == "off" && !signUpFormValue[row.id]) || signUpFormValue[row.id] === setting}
                                                    disabled={signUpFormValue.signupIsActive ? false : true}
                                                    onChange={this.handleChange}
                                                    value={setting}
                                                    name={row.id}
                                                    aria-label={setting}
                                                />
                                            </TableCell>
                                          );
                                      }): null}
                                      
                                    </TableRow>);
                                    }
                                  )}
                                   
                                  
                                
                              </TableBody>
                            </Table>    


                           
                            
    
                        
                    </Panel>
                   
                     
               
              
                
            </div>
        );
    }
}
export const SignUpFormElement = SignupFormElementForm;
