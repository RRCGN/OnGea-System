import React from 'react';
import ReferenceView from '../_Views/ReferenceView';
import { ContentTypes,extendReferenceContentType } from '../../config/content_types';


export default class MobilitiesListView extends React.Component {
 
  static defaultProps = {
    contentType: extendReferenceContentType(ContentTypes.Activities,ContentTypes.ActivityMobilities),//ContentTypes.Mobilities,
    referenceContentType: extendReferenceContentType(ContentTypes.Participants,ContentTypes.MobilitiesParticipant)//extendReferenceContentType(ContentTypes.Organisations,ContentTypes.ActivityOrganisations)
  }
  constructor(props) {
    super(props);

    this.state = {
      data: [],
      isLoading: true,
      isUpdating: false,
      errorMessage:''
     };
     this._isMounted=false;
  }

  getData(){
    let contentType = this.props.contentType;
    if(contentType.id){
    let requestParams = {};
    if(this.props.match && this.props.match.params.parentId)requestParams = {id: this.props.match.params.parentId};
    contentType.api.get(requestParams)
      .then((result) => {
        if(this._isMounted){
          this.setState({data:result.body,isLoading:false,isUpdating:false});
        }
      })
      .catch((error) => {
        if(this._isMounted){
        this.setState({errorMessage:error,isLoading:false,isUpdating:false});}
      });
    } 
  }

  shouldComponentUpdate(nextProps, nextState) {
    
    if(nextProps.match && nextProps.match.isExact && (this.props.location.pathname !== nextProps.location.pathname)){
      this.setState({isUpdating:true});
      this.getData();
      return false;
    }
    
    return (nextState!==this.state);
  }

  componentDidMount() {
    this._isMounted=true;

    this.getData();
  }
  componentWillUnmount() {
    this._isMounted=false;
   }

  render() {
    return (
      <React.Fragment>
        <pre>
          Hello:
         {JSON.stringify(this.state.data || [])}
        </pre>
        {!this.state.isLoading &&
      <ReferenceView {...this.props} data={this.state.data} render={(props) => (
        {}
      )} />}
      </React.Fragment>
  );
  }
}
