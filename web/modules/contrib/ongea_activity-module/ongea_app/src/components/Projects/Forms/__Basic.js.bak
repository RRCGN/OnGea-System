import React from 'react';
import Panel from '../../elements/Panel';
import Grid from '@material-ui/core/Grid';
import {TextInput, SwitchInput, DateInput, ResetAndSave} from '../../elements/FormElements/FormElements';
import FormRowLayout from '../../elements/FormElements/FormRowLayout';
import { formEnhancer } from '../../../libs/utils/formEnhancer';
import { withSnackbar } from 'material-ui-snackbar-provider';
import FileUpload from '../../elements/FormElements/FileUpload';
import { DisplayFormState } from '../../elements/FormElements/DisplayFormState';



function FormControls(props) {
  return (
    <FormRowLayout alignItems="right" fullWidth>
    <ResetAndSave 
        {...props}
      />
  </FormRowLayout>
  );
}

export class BasicForm extends React.Component {
   

    componentWillReceiveProps(newProps){
      const {status, setStatus,history} = newProps;
   
      if(status && status.success && status !== this.props.status){
       this.props.snackbar.showMessage(status.successMessage);
       this.props.updateStateAfterSuccess(status.result,this.props.snackbar);
       setStatus({success:undefined});

       //if request header status is 201 (created)
       if(status.result.status===201){
        console.log("ongea: historyPush to: ",'/projects/'+status.result.body.id);
          history.push('/projects/'+status.result.body.id);
       }

      }else if(status && !status.success){
        this.props.snackbar.showMessage(status.errorMessage);
      }

    }

    render() {
       
       const {
            values,
            touched,
            errors,
            dirty,
            handleChange,
            handleBlur,
            handleSubmit,
            handleReset,
            isSubmitting,
            /*status,
            setStatus,*/
            setFieldValue,
            t
          } = this.props;

       
       console.log('ongea: Projects/Forms/Basic.js props',this.props);

        return (
            
            <React.Fragment>

                    <form onSubmit={handleSubmit}>
                    <FormControls t={t}
             handleReset={handleReset}
             isSubmitting={isSubmitting}
             dirty={dirty}></FormControls>
                     <Panel label="Basic Information & Erasmus +">
                        <FormRowLayout infoLabel=''>
                          <TextInput
                            required
                            id="title"
                            type="text"
                            label={t("title")}
                            error={touched.title && errors.title}
                            value={values.title}
                            onChange={handleChange}
                            onBlur={handleBlur}
                          />
                        </FormRowLayout>

                        <FormRowLayout>
                              <TextInput
                                id="description"
                                type="text"
                                label="Description"
                                multiline
                                error={touched.description && errors.description}
                                value={values.description}
                                onChange={handleChange}
                                onBlur={handleBlur}
                              />
                        </FormRowLayout>
                      </Panel>
                       <Panel>
                       

                        <FormRowLayout>
                                  <Grid container spacing={24}>
                                   <Grid item xs={12} sm={6}>
                                      <DateInput
                                        id="dateFrom"
                                        label="Start date"
                                        error={touched.dateFrom && errors.dateFrom}
                                        value={values.dateFrom}
                                        onChange={handleChange}
                                        onBlur={handleBlur}
                                      />
                                    </Grid>
                                    <Grid item xs={12} sm={6}>
                                        <DateInput
                                          id="dateTo"
                                          label="End date"
                                          error={touched.dateTo && errors.dateTo}
                                          value={values.dateTo}
                                          onChange={handleChange}
                                          onBlur={handleBlur}
                                        />
                                        
                                      </Grid>
                                    </Grid>
                                </FormRowLayout>
                          </Panel>
                          <Panel>
                          

                          <FormRowLayout infoLabel="One file only. Size limit 2 MB. Supported file types: png, gif, and jpeg." infoLabelFullHeight={true}>
                            {/*<FileUpload 
                              id="funderLogos"
                              label="Project Logo" 
                              snackbar={this.props.snackbar} 
                              accept={'image/jpeg, image/png, image/gif'}
                              text='Try dropping some files here, or click to select files to upload. Only .jpg,
                                        .png and .gif type files will be accepted.'
                              countLimit={1}
                              value={values.funderLogos}
                              setFieldValue={setFieldValue}
                              filesAreImages={true}
                              />*/}
                          </FormRowLayout>
                        </Panel>
                        <Panel>
                            <FormRowLayout infoLabel="One file only. Size limit 2 MB. Supported file types: png, gif, and jpeg." infoLabelFullHeight={true}>
                            {/*<FileUpload 
                                id="image"
                                label="Project Image" 
                                snackbar={this.props.snackbar} 
                                accept={'image/jpeg, image/png, image/gif'}
                                text='Try dropping some files here, or click to select files to upload. Only .jpg,
                                        .png and .gif type files will be accepted.'
                                countLimit={1}
                                value={values.image}
                                setFieldValue={setFieldValue}
                                filesAreImages={true}
                                />*/}
                          </FormRowLayout>
                        </Panel>
                        <Panel>
                         <FormRowLayout>
                            <SwitchInput
                              id="isVisible"
                              label="is visible?"
                              error={touched.isVisible && errors.isVisible}
                              value={values.isVisible}
                              onChange={handleChange}
                              onBlur={handleBlur}
                            />
                        </FormRowLayout>
                        </Panel>

                         <Panel label="Erasmus +">
                         <FormRowLayout infoLabel={t('This project is Erasmus+ funded__description')}>
                            <SwitchInput
                              id="isErasmusFunded"
                              label="This Project is Erasmus+ funded"
                              error={touched.isErasmusFunded && errors.isErasmusFunded}
                              value={values.isErasmusFunded}
                              onChange={handleChange}
                              onBlur={handleBlur}
                            />
                        </FormRowLayout>
                        <FormRowLayout infoLabel='Format should be like: 2018-2-FR02-KA205-012345 (year of application - application round - national agency code - funding type - project number)'>
                          <TextInput
                            id="grantAgreementNumber"
                            type="text"
                            disabled={!values.isErasmusFunded}
                            label="Grant Agreement Number"
                            error={touched.grantAgreementNumber && errors.grantAgreementNumber}
                            value={values.grantAgreementNumber}
                            onChange={handleChange}
                            onBlur={handleBlur}
                          />
                        </FormRowLayout>
                        </Panel>

                       <FormControls t={t}
             handleReset={handleReset}
             isSubmitting={isSubmitting}
             dirty={dirty}></FormControls>
                    </form>
                
                     <Panel label="Form output">
              <DisplayFormState 
                {...this.props} />
            </Panel>
               
              
                
            </React.Fragment>
        );
    }
}
export const Basic = withSnackbar()(formEnhancer(BasicForm));
