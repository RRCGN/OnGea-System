{"version":3,"sources":["../source/format.js"],"names":["VALID_PUNCTUATION","matches_entirely","parse","getIDDPrefix","Metadata","formatRFC3966","defaultOptions","formatExtension","number","extension","metadata","ext","format","arg_1","arg_2","arg_3","arg_4","arg_5","sort_out_arguments","input","format_type","options","country","hasCountry","Error","countryCallingCode","chooseCountryByCountryCallingCode","phone","nationalNumber","v2","format_national_number","add_extension","fromCountry","IDDPrefix","humanReadable","formattedForSameCountryCallingCode","formatIDDSameCountryCallingCodeNumber","FIRST_GROUP_PATTERN","format_national_number_using_format","international","enforce_national_prefix","format_pattern_matcher","RegExp","pattern","national_prefix_may_be_omitted","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormatting","replace","formatted_number","internationalFormat","local_to_international_style","format_as","choose_format_for_number","formats","available_formats","national_number","leadingDigitsPatterns","length","last_leading_digits_pattern","search","local","trim","defaultCountry","extended","is_object","TypeError","_","toCountryCallingCode","toCountryMetadata","fromCountryMetadata"],"mappings":"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","file":"format.js","sourcesContent":["// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of 17th November, 2016.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport\r\n{\r\n\t// extractCountryCallingCode,\r\n\tVALID_PUNCTUATION,\r\n\tmatches_entirely\r\n}\r\nfrom './common'\r\n\r\nimport parse from './parse'\r\n\r\nimport { getIDDPrefix } from './IDD'\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst defaultOptions =\r\n{\r\n\tformatExtension: (number, extension, metadata) => `${number}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// format('8005553535', 'RU', 'INTERNATIONAL')\r\n// format('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// format({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// format('+78005553535', 'NATIONAL')\r\n// format('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function format(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tconst\r\n\t{\r\n\t\tinput,\r\n\t\tformat_type,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n\t= sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n\r\n\tif (input.country)\r\n\t{\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country))\r\n\t\t{\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode)\r\n\t{\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'INTERNATIONAL', false, metadata)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966\r\n\t\t\t({\r\n\t\t\t\tnumber : `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text    : input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable)\r\n\t\t\t{\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${format_national_number(nationalNumber, 'INTERNATIONAL', false, metadata)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = format_national_number(nationalNumber, 'NATIONAL', true, metadata)\r\n\t\t\treturn add_extension(number, input.ext, metadata, options.formatExtension)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function format_national_number_using_format(number, format, international, enforce_national_prefix, metadata)\r\n{\r\n\tconst format_pattern_matcher = new RegExp(format.pattern())\r\n\r\n\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t// set for this country, or when this rule is set but\r\n\t// national prefix is optional for this phone number format\r\n\t// (and it is not enforced explicitly)\r\n\tconst national_prefix_may_be_omitted = !format.nationalPrefixFormattingRule() ||\r\n\t\t(format.nationalPrefixFormattingRule() && format.nationalPrefixIsOptionalWhenFormatting() && !enforce_national_prefix)\r\n\r\n\tif (!international && !national_prefix_may_be_omitted)\r\n\t{\r\n\t\treturn number.replace\r\n\t\t(\r\n\t\t\tformat_pattern_matcher,\r\n\t\t\tformat.format().replace\r\n\t\t\t(\r\n\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t)\r\n\t\t)\r\n\t}\r\n\r\n\tconst formatted_number = number.replace\r\n\t(\r\n\t\tformat_pattern_matcher,\r\n\t\tinternational ? format.internationalFormat() : format.format()\r\n\t)\r\n\r\n\tif (international)\r\n\t{\r\n\t\treturn local_to_international_style(formatted_number)\r\n\t}\r\n\r\n\treturn formatted_number\r\n}\r\n\r\nfunction format_national_number(number, format_as, enforce_national_prefix, metadata)\r\n{\r\n\tconst format = choose_format_for_number(metadata.formats(), number)\r\n\r\n\tif (!format)\r\n\t{\r\n\t\treturn number\r\n\t}\r\n\r\n\treturn format_national_number_using_format(number, format, format_as === 'INTERNATIONAL', enforce_national_prefix, metadata)\r\n}\r\n\r\nexport function choose_format_for_number(available_formats, national_number)\r\n{\r\n\tfor (const format of available_formats)\r\n\t{\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0)\r\n\t\t{\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst last_leading_digits_pattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (national_number.search(last_leading_digits_pattern) !== 0)\r\n\t\t\t{\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matches_entirely(national_number, format.pattern()))\r\n\t\t{\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\nexport function local_to_international_style(local)\r\n{\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\n// Sort out arguments\r\nfunction sort_out_arguments(arg_1, arg_2, arg_3, arg_4, arg_5)\r\n{\r\n\tlet input\r\n\tlet format_type\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// Sort out arguments.\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `format('8005553535', ...)`.\r\n\tif (typeof arg_1 === 'string')\r\n\t{\r\n\t\t// If country code is supplied.\r\n\t\t// `format('8005553535', 'RU', 'NATIONAL', [options], metadata)`.\r\n\t\tif (typeof arg_3 === 'string')\r\n\t\t{\r\n\t\t\tformat_type = arg_3\r\n\r\n\t\t\tif (arg_5)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_4\r\n\t\t\t\tmetadata = arg_5\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { defaultCountry: arg_2, extended: true }, metadata)\r\n\t\t}\r\n\t\t// Just an international phone number is supplied\r\n\t\t// `format('+78005553535', 'NATIONAL', [options], metadata)`.\r\n\t\telse\r\n\t\t{\r\n\t\t\tif (typeof arg_2 !== 'string')\r\n\t\t\t{\r\n\t\t\t\tthrow new Error('`format` argument not passed to `formatNumber(number, format)`')\r\n\t\t\t}\r\n\r\n\t\t\tformat_type = arg_2\r\n\r\n\t\t\tif (arg_4)\r\n\t\t\t{\r\n\t\t\t\toptions  = arg_3\r\n\t\t\t\tmetadata = arg_4\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tmetadata = arg_3\r\n\t\t\t}\r\n\r\n\t\t\tinput = parse(arg_1, { extended: true }, metadata)\r\n\t\t}\r\n\t}\r\n\t// If the phone number is passed as a parsed number object.\r\n\t// `format({ phone: '8005553535', country: 'RU' }, 'NATIONAL', [options], metadata)`.\r\n\telse if (is_object(arg_1))\r\n\t{\r\n\t\tinput       = arg_1\r\n\t\tformat_type = arg_2\r\n\r\n\t\tif (arg_4)\r\n\t\t{\r\n\t\t\toptions  = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\t}\r\n\telse throw new TypeError('A phone number must either be a string or an object of shape { phone, [country] }.')\r\n\r\n\tif (format_type === 'International') {\r\n\t\tformat_type = 'INTERNATIONAL'\r\n\t} else if (format_type === 'National') {\r\n\t\tformat_type = 'NATIONAL'\r\n\t}\r\n\r\n\t// Validate `format_type`.\r\n\tswitch (format_type)\r\n\t{\r\n\t\tcase 'E.164':\r\n\t\tcase 'INTERNATIONAL':\r\n\t\tcase 'NATIONAL':\r\n\t\tcase 'RFC3966':\r\n\t\tcase 'IDD':\r\n\t\t\tbreak\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown format type argument passed to \"format()\": \"${format_type}\"`)\r\n\t}\r\n\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...defaultOptions, ...options }\r\n\t} else {\r\n\t\toptions = defaultOptions\r\n\t}\r\n\r\n\treturn { input, format_type, options, metadata: new Metadata(metadata) }\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\nfunction add_extension(number, ext, metadata, formatExtension)\r\n{\r\n\treturn ext ? formatExtension(number, ext, metadata) : number\r\n}\r\n\r\nexport function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata)\r\n{\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode())\r\n\t{\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1')\r\n\t\t{\r\n\t\t\treturn toCountryCallingCode + ' ' + format_national_number(number, 'NATIONAL', false, toCountryMetadata)\r\n\t\t}\r\n\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\treturn format_national_number(number, 'NATIONAL', false, toCountryMetadata)\r\n\t}\r\n}"]}